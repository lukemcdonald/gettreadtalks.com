/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
  type Maybe<T> = T | null
  type InputMaybe<T> = T | null
  type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
  type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
  type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
  /** All built-in and custom scalars, mapped to their actual values */
  type Scalars = {
    /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
    ID: string
    /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
    String: string
    /** The `Boolean` scalar type represents `true` or `false`. */
    Boolean: boolean
    /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
    Int: number
    /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
    Float: number
    /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
    Date: string
    GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
    /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
    JSON: Record<string, unknown>
  }

  type AVIFOptions = {
    readonly lossless: InputMaybe<Scalars['Boolean']>
    readonly quality: InputMaybe<Scalars['Int']>
    readonly speed: InputMaybe<Scalars['Int']>
  }

  type AirtableAffiliateLink = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableAffiliateLinkData>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableAffiliateLinkConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableAffiliateLinkEdge>
    readonly group: ReadonlyArray<AirtableAffiliateLinkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableAffiliateLink>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableAffiliateLinkConnection_distinctArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkConnection_groupArgs = {
    field: AirtableAffiliateLinkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableAffiliateLinkConnection_maxArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkConnection_minArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkConnection_sumArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkData = {
    readonly affiliate: Maybe<Scalars['String']>
    readonly description: Maybe<AirtableField>
    readonly featured: Maybe<Scalars['Boolean']>
    readonly image: Maybe<AirtableField>
    readonly link: Maybe<AirtableField>
    readonly productId: Maybe<Scalars['Int']>
    readonly published: Maybe<Scalars['Boolean']>
    readonly subtitle: Maybe<Scalars['String']>
    readonly title: Maybe<Scalars['String']>
    readonly type: Maybe<Scalars['String']>
  }

  type AirtableAffiliateLinkDataFieldSelector = {
    readonly affiliate: InputMaybe<FieldSelectorEnum>
    readonly description: InputMaybe<AirtableFieldFieldSelector>
    readonly featured: InputMaybe<FieldSelectorEnum>
    readonly image: InputMaybe<AirtableFieldFieldSelector>
    readonly link: InputMaybe<AirtableFieldFieldSelector>
    readonly productId: InputMaybe<FieldSelectorEnum>
    readonly published: InputMaybe<FieldSelectorEnum>
    readonly subtitle: InputMaybe<FieldSelectorEnum>
    readonly title: InputMaybe<FieldSelectorEnum>
    readonly type: InputMaybe<FieldSelectorEnum>
  }

  type AirtableAffiliateLinkDataFilterInput = {
    readonly affiliate: InputMaybe<StringQueryOperatorInput>
    readonly description: InputMaybe<AirtableFieldFilterInput>
    readonly featured: InputMaybe<BooleanQueryOperatorInput>
    readonly image: InputMaybe<AirtableFieldFilterInput>
    readonly link: InputMaybe<AirtableFieldFilterInput>
    readonly productId: InputMaybe<IntQueryOperatorInput>
    readonly published: InputMaybe<BooleanQueryOperatorInput>
    readonly subtitle: InputMaybe<StringQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableAffiliateLinkDataSortInput = {
    readonly affiliate: InputMaybe<SortOrderEnum>
    readonly description: InputMaybe<AirtableFieldSortInput>
    readonly featured: InputMaybe<SortOrderEnum>
    readonly image: InputMaybe<AirtableFieldSortInput>
    readonly link: InputMaybe<AirtableFieldSortInput>
    readonly productId: InputMaybe<SortOrderEnum>
    readonly published: InputMaybe<SortOrderEnum>
    readonly subtitle: InputMaybe<SortOrderEnum>
    readonly title: InputMaybe<SortOrderEnum>
    readonly type: InputMaybe<SortOrderEnum>
  }

  type AirtableAffiliateLinkEdge = {
    readonly next: Maybe<AirtableAffiliateLink>
    readonly node: AirtableAffiliateLink
    readonly previous: Maybe<AirtableAffiliateLink>
  }

  type AirtableAffiliateLinkFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableAffiliateLinkDataFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableAffiliateLinkFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableAffiliateLinkDataFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableAffiliateLinkGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableAffiliateLinkEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableAffiliateLinkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableAffiliateLink>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableAffiliateLinkGroupConnection_distinctArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkGroupConnection_groupArgs = {
    field: AirtableAffiliateLinkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableAffiliateLinkGroupConnection_maxArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkGroupConnection_minArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkGroupConnection_sumArgs = {
    field: AirtableAffiliateLinkFieldSelector
  }

  type AirtableAffiliateLinkSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableAffiliateLinkDataSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableClip = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableClipData>
    readonly fields: Maybe<AirtableClipFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableClipConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableClipEdge>
    readonly group: ReadonlyArray<AirtableClipGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableClip>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableClipConnection_distinctArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipConnection_groupArgs = {
    field: AirtableClipFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableClipConnection_maxArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipConnection_minArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipConnection_sumArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipData = {
    readonly link: Maybe<AirtableField>
    readonly published: Maybe<Scalars['Boolean']>
    readonly publishedDate: Maybe<Scalars['Date']>
    readonly speaker: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly speakers: Maybe<ReadonlyArray<Maybe<AirtableSpeaker>>>
    readonly talks: Maybe<ReadonlyArray<Maybe<AirtableTalk>>>
    readonly title: Maybe<Scalars['String']>
    readonly topics: Maybe<ReadonlyArray<Maybe<AirtableTopic>>>
  }

  type AirtableClipData_publishedDateArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type AirtableClipDataFieldSelector = {
    readonly link: InputMaybe<AirtableFieldFieldSelector>
    readonly published: InputMaybe<FieldSelectorEnum>
    readonly publishedDate: InputMaybe<FieldSelectorEnum>
    readonly speaker: InputMaybe<FieldSelectorEnum>
    readonly speakers: InputMaybe<AirtableSpeakerFieldSelector>
    readonly talks: InputMaybe<AirtableTalkFieldSelector>
    readonly title: InputMaybe<FieldSelectorEnum>
    readonly topics: InputMaybe<AirtableTopicFieldSelector>
  }

  type AirtableClipDataFilterInput = {
    readonly link: InputMaybe<AirtableFieldFilterInput>
    readonly published: InputMaybe<BooleanQueryOperatorInput>
    readonly publishedDate: InputMaybe<DateQueryOperatorInput>
    readonly speaker: InputMaybe<StringQueryOperatorInput>
    readonly speakers: InputMaybe<AirtableSpeakerFilterListInput>
    readonly talks: InputMaybe<AirtableTalkFilterListInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly topics: InputMaybe<AirtableTopicFilterListInput>
  }

  type AirtableClipDataSortInput = {
    readonly link: InputMaybe<AirtableFieldSortInput>
    readonly published: InputMaybe<SortOrderEnum>
    readonly publishedDate: InputMaybe<SortOrderEnum>
    readonly speaker: InputMaybe<SortOrderEnum>
    readonly speakers: InputMaybe<AirtableSpeakerSortInput>
    readonly talks: InputMaybe<AirtableTalkSortInput>
    readonly title: InputMaybe<SortOrderEnum>
    readonly topics: InputMaybe<AirtableTopicSortInput>
  }

  type AirtableClipEdge = {
    readonly next: Maybe<AirtableClip>
    readonly node: AirtableClip
    readonly previous: Maybe<AirtableClip>
  }

  type AirtableClipFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableClipDataFieldSelector>
    readonly fields: InputMaybe<AirtableClipFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableClipFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtableClipFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtableClipFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableClipFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtableClipFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableClipDataFilterInput>
    readonly fields: InputMaybe<AirtableClipFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableClipFilterListInput = {
    readonly elemMatch: InputMaybe<AirtableClipFilterInput>
  }

  type AirtableClipGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableClipEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableClipGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableClip>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableClipGroupConnection_distinctArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipGroupConnection_groupArgs = {
    field: AirtableClipFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableClipGroupConnection_maxArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipGroupConnection_minArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipGroupConnection_sumArgs = {
    field: AirtableClipFieldSelector
  }

  type AirtableClipSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableClipDataSortInput>
    readonly fields: InputMaybe<AirtableClipFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableField = Node & {
    /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
    readonly childMarkdownRemark: Maybe<MarkdownRemark>
    readonly children: ReadonlyArray<Node>
    /** Returns all children nodes filtered by type MarkdownRemark */
    readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly localFiles: Maybe<ReadonlyArray<Maybe<File>>>
    readonly parent: Maybe<Node>
  }

  type AirtableFieldConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableFieldEdge>
    readonly group: ReadonlyArray<AirtableFieldGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableField>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableFieldConnection_distinctArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldConnection_groupArgs = {
    field: AirtableFieldFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableFieldConnection_maxArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldConnection_minArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldConnection_sumArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldEdge = {
    readonly next: Maybe<AirtableField>
    readonly node: AirtableField
    readonly previous: Maybe<AirtableField>
  }

  type AirtableFieldFieldSelector = {
    readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly localFiles: InputMaybe<FileFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
  }

  type AirtableFieldFilterInput = {
    readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly localFiles: InputMaybe<FileFilterListInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type AirtableFieldGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableFieldEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableFieldGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableField>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableFieldGroupConnection_distinctArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldGroupConnection_groupArgs = {
    field: AirtableFieldFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableFieldGroupConnection_maxArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldGroupConnection_minArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldGroupConnection_sumArgs = {
    field: AirtableFieldFieldSelector
  }

  type AirtableFieldSortInput = {
    readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>
    readonly children: InputMaybe<NodeSortInput>
    readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly localFiles: InputMaybe<FileSortInput>
    readonly parent: InputMaybe<NodeSortInput>
  }

  type AirtablePage = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtablePageData>
    readonly fields: Maybe<AirtablePageFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtablePageConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtablePageEdge>
    readonly group: ReadonlyArray<AirtablePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtablePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtablePageConnection_distinctArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageConnection_groupArgs = {
    field: AirtablePageFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtablePageConnection_maxArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageConnection_minArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageConnection_sumArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageData = {
    readonly content: Maybe<AirtableField>
    readonly published: Maybe<Scalars['Boolean']>
    readonly title: Maybe<Scalars['String']>
  }

  type AirtablePageDataFieldSelector = {
    readonly content: InputMaybe<AirtableFieldFieldSelector>
    readonly published: InputMaybe<FieldSelectorEnum>
    readonly title: InputMaybe<FieldSelectorEnum>
  }

  type AirtablePageDataFilterInput = {
    readonly content: InputMaybe<AirtableFieldFilterInput>
    readonly published: InputMaybe<BooleanQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
  }

  type AirtablePageDataSortInput = {
    readonly content: InputMaybe<AirtableFieldSortInput>
    readonly published: InputMaybe<SortOrderEnum>
    readonly title: InputMaybe<SortOrderEnum>
  }

  type AirtablePageEdge = {
    readonly next: Maybe<AirtablePage>
    readonly node: AirtablePage
    readonly previous: Maybe<AirtablePage>
  }

  type AirtablePageFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtablePageDataFieldSelector>
    readonly fields: InputMaybe<AirtablePageFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtablePageFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtablePageFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtablePageFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtablePageFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtablePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtablePageDataFilterInput>
    readonly fields: InputMaybe<AirtablePageFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtablePageGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtablePageEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtablePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtablePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtablePageGroupConnection_distinctArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageGroupConnection_groupArgs = {
    field: AirtablePageFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtablePageGroupConnection_maxArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageGroupConnection_minArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageGroupConnection_sumArgs = {
    field: AirtablePageFieldSelector
  }

  type AirtablePageSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtablePageDataSortInput>
    readonly fields: InputMaybe<AirtablePageFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableScripture = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableScriptureData>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableScriptureConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableScriptureEdge>
    readonly group: ReadonlyArray<AirtableScriptureGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableScripture>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableScriptureConnection_distinctArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureConnection_groupArgs = {
    field: AirtableScriptureFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableScriptureConnection_maxArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureConnection_minArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureConnection_sumArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureData = {
    readonly content: Maybe<Scalars['String']>
    readonly verse: Maybe<Scalars['String']>
    readonly version: Maybe<Scalars['String']>
  }

  type AirtableScriptureDataFieldSelector = {
    readonly content: InputMaybe<FieldSelectorEnum>
    readonly verse: InputMaybe<FieldSelectorEnum>
    readonly version: InputMaybe<FieldSelectorEnum>
  }

  type AirtableScriptureDataFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>
    readonly verse: InputMaybe<StringQueryOperatorInput>
    readonly version: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableScriptureDataSortInput = {
    readonly content: InputMaybe<SortOrderEnum>
    readonly verse: InputMaybe<SortOrderEnum>
    readonly version: InputMaybe<SortOrderEnum>
  }

  type AirtableScriptureEdge = {
    readonly next: Maybe<AirtableScripture>
    readonly node: AirtableScripture
    readonly previous: Maybe<AirtableScripture>
  }

  type AirtableScriptureFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableScriptureDataFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableScriptureFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableScriptureDataFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableScriptureGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableScriptureEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableScriptureGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableScripture>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableScriptureGroupConnection_distinctArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureGroupConnection_groupArgs = {
    field: AirtableScriptureFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableScriptureGroupConnection_maxArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureGroupConnection_minArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureGroupConnection_sumArgs = {
    field: AirtableScriptureFieldSelector
  }

  type AirtableScriptureSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableScriptureDataSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableSerie = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableSerieData>
    readonly fields: Maybe<AirtableSerieFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableSerieConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableSerieEdge>
    readonly group: ReadonlyArray<AirtableSerieGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableSerie>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableSerieConnection_distinctArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieConnection_groupArgs = {
    field: AirtableSerieFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableSerieConnection_maxArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieConnection_minArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieConnection_sumArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieData = {
    readonly link: Maybe<AirtableField>
    readonly publishedTalksCount: Maybe<Scalars['Int']>
    readonly speakers: Maybe<ReadonlyArray<Maybe<AirtableSpeaker>>>
    readonly talks: Maybe<ReadonlyArray<Maybe<AirtableTalk>>>
    readonly title: Maybe<Scalars['String']>
    readonly totalTalksCount: Maybe<Scalars['Int']>
  }

  type AirtableSerieDataFieldSelector = {
    readonly link: InputMaybe<AirtableFieldFieldSelector>
    readonly publishedTalksCount: InputMaybe<FieldSelectorEnum>
    readonly speakers: InputMaybe<AirtableSpeakerFieldSelector>
    readonly talks: InputMaybe<AirtableTalkFieldSelector>
    readonly title: InputMaybe<FieldSelectorEnum>
    readonly totalTalksCount: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSerieDataFilterInput = {
    readonly link: InputMaybe<AirtableFieldFilterInput>
    readonly publishedTalksCount: InputMaybe<IntQueryOperatorInput>
    readonly speakers: InputMaybe<AirtableSpeakerFilterListInput>
    readonly talks: InputMaybe<AirtableTalkFilterListInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly totalTalksCount: InputMaybe<IntQueryOperatorInput>
  }

  type AirtableSerieDataSortInput = {
    readonly link: InputMaybe<AirtableFieldSortInput>
    readonly publishedTalksCount: InputMaybe<SortOrderEnum>
    readonly speakers: InputMaybe<AirtableSpeakerSortInput>
    readonly talks: InputMaybe<AirtableTalkSortInput>
    readonly title: InputMaybe<SortOrderEnum>
    readonly totalTalksCount: InputMaybe<SortOrderEnum>
  }

  type AirtableSerieEdge = {
    readonly next: Maybe<AirtableSerie>
    readonly node: AirtableSerie
    readonly previous: Maybe<AirtableSerie>
  }

  type AirtableSerieFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableSerieDataFieldSelector>
    readonly fields: InputMaybe<AirtableSerieFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSerieFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtableSerieFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSerieFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableSerieFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtableSerieFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableSerieDataFilterInput>
    readonly fields: InputMaybe<AirtableSerieFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableSerieFilterListInput = {
    readonly elemMatch: InputMaybe<AirtableSerieFilterInput>
  }

  type AirtableSerieGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableSerieEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableSerieGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableSerie>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableSerieGroupConnection_distinctArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieGroupConnection_groupArgs = {
    field: AirtableSerieFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableSerieGroupConnection_maxArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieGroupConnection_minArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieGroupConnection_sumArgs = {
    field: AirtableSerieFieldSelector
  }

  type AirtableSerieSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableSerieDataSortInput>
    readonly fields: InputMaybe<AirtableSerieFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableSpeaker = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableSpeakerData>
    readonly fields: Maybe<AirtableSpeakerFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableSpeakerConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableSpeakerEdge>
    readonly group: ReadonlyArray<AirtableSpeakerGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableSpeaker>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableSpeakerConnection_distinctArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerConnection_groupArgs = {
    field: AirtableSpeakerFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableSpeakerConnection_maxArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerConnection_minArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerConnection_sumArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerData = {
    readonly avatar: Maybe<AirtableField>
    readonly banner: Maybe<AirtableField>
    readonly clips: Maybe<ReadonlyArray<Maybe<AirtableClip>>>
    readonly description: Maybe<AirtableField>
    readonly favorite: Maybe<Scalars['Boolean']>
    readonly firstName: Maybe<Scalars['String']>
    readonly lastName: Maybe<Scalars['String']>
    readonly ministry: Maybe<Scalars['String']>
    readonly publishedClipsCount: Maybe<Scalars['Int']>
    readonly publishedTalksCount: Maybe<Scalars['Int']>
    readonly role: Maybe<Scalars['String']>
    readonly talks: Maybe<ReadonlyArray<Maybe<AirtableTalk>>>
    readonly title: Maybe<Scalars['String']>
    readonly website: Maybe<Scalars['String']>
  }

  type AirtableSpeakerDataFieldSelector = {
    readonly avatar: InputMaybe<AirtableFieldFieldSelector>
    readonly banner: InputMaybe<AirtableFieldFieldSelector>
    readonly clips: InputMaybe<AirtableClipFieldSelector>
    readonly description: InputMaybe<AirtableFieldFieldSelector>
    readonly favorite: InputMaybe<FieldSelectorEnum>
    readonly firstName: InputMaybe<FieldSelectorEnum>
    readonly lastName: InputMaybe<FieldSelectorEnum>
    readonly ministry: InputMaybe<FieldSelectorEnum>
    readonly publishedClipsCount: InputMaybe<FieldSelectorEnum>
    readonly publishedTalksCount: InputMaybe<FieldSelectorEnum>
    readonly role: InputMaybe<FieldSelectorEnum>
    readonly talks: InputMaybe<AirtableTalkFieldSelector>
    readonly title: InputMaybe<FieldSelectorEnum>
    readonly website: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSpeakerDataFilterInput = {
    readonly avatar: InputMaybe<AirtableFieldFilterInput>
    readonly banner: InputMaybe<AirtableFieldFilterInput>
    readonly clips: InputMaybe<AirtableClipFilterListInput>
    readonly description: InputMaybe<AirtableFieldFilterInput>
    readonly favorite: InputMaybe<BooleanQueryOperatorInput>
    readonly firstName: InputMaybe<StringQueryOperatorInput>
    readonly lastName: InputMaybe<StringQueryOperatorInput>
    readonly ministry: InputMaybe<StringQueryOperatorInput>
    readonly publishedClipsCount: InputMaybe<IntQueryOperatorInput>
    readonly publishedTalksCount: InputMaybe<IntQueryOperatorInput>
    readonly role: InputMaybe<StringQueryOperatorInput>
    readonly talks: InputMaybe<AirtableTalkFilterListInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly website: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableSpeakerDataSortInput = {
    readonly avatar: InputMaybe<AirtableFieldSortInput>
    readonly banner: InputMaybe<AirtableFieldSortInput>
    readonly clips: InputMaybe<AirtableClipSortInput>
    readonly description: InputMaybe<AirtableFieldSortInput>
    readonly favorite: InputMaybe<SortOrderEnum>
    readonly firstName: InputMaybe<SortOrderEnum>
    readonly lastName: InputMaybe<SortOrderEnum>
    readonly ministry: InputMaybe<SortOrderEnum>
    readonly publishedClipsCount: InputMaybe<SortOrderEnum>
    readonly publishedTalksCount: InputMaybe<SortOrderEnum>
    readonly role: InputMaybe<SortOrderEnum>
    readonly talks: InputMaybe<AirtableTalkSortInput>
    readonly title: InputMaybe<SortOrderEnum>
    readonly website: InputMaybe<SortOrderEnum>
  }

  type AirtableSpeakerEdge = {
    readonly next: Maybe<AirtableSpeaker>
    readonly node: AirtableSpeaker
    readonly previous: Maybe<AirtableSpeaker>
  }

  type AirtableSpeakerFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableSpeakerDataFieldSelector>
    readonly fields: InputMaybe<AirtableSpeakerFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSpeakerFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtableSpeakerFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtableSpeakerFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableSpeakerFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtableSpeakerFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableSpeakerDataFilterInput>
    readonly fields: InputMaybe<AirtableSpeakerFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableSpeakerFilterListInput = {
    readonly elemMatch: InputMaybe<AirtableSpeakerFilterInput>
  }

  type AirtableSpeakerGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableSpeakerEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableSpeakerGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableSpeaker>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableSpeakerGroupConnection_distinctArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerGroupConnection_groupArgs = {
    field: AirtableSpeakerFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableSpeakerGroupConnection_maxArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerGroupConnection_minArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerGroupConnection_sumArgs = {
    field: AirtableSpeakerFieldSelector
  }

  type AirtableSpeakerSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableSpeakerDataSortInput>
    readonly fields: InputMaybe<AirtableSpeakerFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableTalk = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableTalkData>
    readonly fields: Maybe<AirtableTalkFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableTalkConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableTalkEdge>
    readonly group: ReadonlyArray<AirtableTalkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableTalk>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableTalkConnection_distinctArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkConnection_groupArgs = {
    field: AirtableTalkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableTalkConnection_maxArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkConnection_minArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkConnection_sumArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkData = {
    readonly clips: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly favorite: Maybe<Scalars['Boolean']>
    readonly link: Maybe<AirtableField>
    readonly notes: Maybe<Scalars['String']>
    readonly published: Maybe<Scalars['Boolean']>
    readonly publishedDate: Maybe<Scalars['Date']>
    readonly scripture: Maybe<Scalars['String']>
    readonly series: Maybe<ReadonlyArray<Maybe<AirtableSerie>>>
    readonly seriesOrder: Maybe<Scalars['Int']>
    readonly speaker: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly speakers: Maybe<ReadonlyArray<Maybe<AirtableSpeaker>>>
    readonly status: Maybe<Scalars['String']>
    readonly title: Maybe<Scalars['String']>
    readonly topics: Maybe<ReadonlyArray<Maybe<AirtableTopic>>>
  }

  type AirtableTalkData_publishedDateArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type AirtableTalkDataFieldSelector = {
    readonly clips: InputMaybe<FieldSelectorEnum>
    readonly favorite: InputMaybe<FieldSelectorEnum>
    readonly link: InputMaybe<AirtableFieldFieldSelector>
    readonly notes: InputMaybe<FieldSelectorEnum>
    readonly published: InputMaybe<FieldSelectorEnum>
    readonly publishedDate: InputMaybe<FieldSelectorEnum>
    readonly scripture: InputMaybe<FieldSelectorEnum>
    readonly series: InputMaybe<AirtableSerieFieldSelector>
    readonly seriesOrder: InputMaybe<FieldSelectorEnum>
    readonly speaker: InputMaybe<FieldSelectorEnum>
    readonly speakers: InputMaybe<AirtableSpeakerFieldSelector>
    readonly status: InputMaybe<FieldSelectorEnum>
    readonly title: InputMaybe<FieldSelectorEnum>
    readonly topics: InputMaybe<AirtableTopicFieldSelector>
  }

  type AirtableTalkDataFilterInput = {
    readonly clips: InputMaybe<StringQueryOperatorInput>
    readonly favorite: InputMaybe<BooleanQueryOperatorInput>
    readonly link: InputMaybe<AirtableFieldFilterInput>
    readonly notes: InputMaybe<StringQueryOperatorInput>
    readonly published: InputMaybe<BooleanQueryOperatorInput>
    readonly publishedDate: InputMaybe<DateQueryOperatorInput>
    readonly scripture: InputMaybe<StringQueryOperatorInput>
    readonly series: InputMaybe<AirtableSerieFilterListInput>
    readonly seriesOrder: InputMaybe<IntQueryOperatorInput>
    readonly speaker: InputMaybe<StringQueryOperatorInput>
    readonly speakers: InputMaybe<AirtableSpeakerFilterListInput>
    readonly status: InputMaybe<StringQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
    readonly topics: InputMaybe<AirtableTopicFilterListInput>
  }

  type AirtableTalkDataSortInput = {
    readonly clips: InputMaybe<SortOrderEnum>
    readonly favorite: InputMaybe<SortOrderEnum>
    readonly link: InputMaybe<AirtableFieldSortInput>
    readonly notes: InputMaybe<SortOrderEnum>
    readonly published: InputMaybe<SortOrderEnum>
    readonly publishedDate: InputMaybe<SortOrderEnum>
    readonly scripture: InputMaybe<SortOrderEnum>
    readonly series: InputMaybe<AirtableSerieSortInput>
    readonly seriesOrder: InputMaybe<SortOrderEnum>
    readonly speaker: InputMaybe<SortOrderEnum>
    readonly speakers: InputMaybe<AirtableSpeakerSortInput>
    readonly status: InputMaybe<SortOrderEnum>
    readonly title: InputMaybe<SortOrderEnum>
    readonly topics: InputMaybe<AirtableTopicSortInput>
  }

  type AirtableTalkEdge = {
    readonly next: Maybe<AirtableTalk>
    readonly node: AirtableTalk
    readonly previous: Maybe<AirtableTalk>
  }

  type AirtableTalkFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableTalkDataFieldSelector>
    readonly fields: InputMaybe<AirtableTalkFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableTalkFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtableTalkFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtableTalkFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableTalkFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtableTalkFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableTalkDataFilterInput>
    readonly fields: InputMaybe<AirtableTalkFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableTalkFilterListInput = {
    readonly elemMatch: InputMaybe<AirtableTalkFilterInput>
  }

  type AirtableTalkGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableTalkEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableTalkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableTalk>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableTalkGroupConnection_distinctArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkGroupConnection_groupArgs = {
    field: AirtableTalkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableTalkGroupConnection_maxArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkGroupConnection_minArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkGroupConnection_sumArgs = {
    field: AirtableTalkFieldSelector
  }

  type AirtableTalkSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableTalkDataSortInput>
    readonly fields: InputMaybe<AirtableTalkFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type AirtableTopic = Node & {
    readonly children: ReadonlyArray<Node>
    readonly data: Maybe<AirtableTopicData>
    readonly fields: Maybe<AirtableTopicFields>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly queryName: Maybe<Scalars['String']>
    readonly recordId: Maybe<Scalars['String']>
    readonly rowIndex: Maybe<Scalars['Int']>
    readonly table: Maybe<Scalars['String']>
  }

  type AirtableTopicConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableTopicEdge>
    readonly group: ReadonlyArray<AirtableTopicGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableTopic>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableTopicConnection_distinctArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicConnection_groupArgs = {
    field: AirtableTopicFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableTopicConnection_maxArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicConnection_minArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicConnection_sumArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicData = {
    readonly clips: Maybe<ReadonlyArray<Maybe<AirtableClip>>>
    readonly count: Maybe<Scalars['Int']>
    readonly publishedClipsCount: Maybe<Scalars['Int']>
    readonly publishedTalksCount: Maybe<Scalars['Int']>
    readonly talks: Maybe<ReadonlyArray<Maybe<AirtableTalk>>>
    readonly title: Maybe<Scalars['String']>
  }

  type AirtableTopicDataFieldSelector = {
    readonly clips: InputMaybe<AirtableClipFieldSelector>
    readonly count: InputMaybe<FieldSelectorEnum>
    readonly publishedClipsCount: InputMaybe<FieldSelectorEnum>
    readonly publishedTalksCount: InputMaybe<FieldSelectorEnum>
    readonly talks: InputMaybe<AirtableTalkFieldSelector>
    readonly title: InputMaybe<FieldSelectorEnum>
  }

  type AirtableTopicDataFilterInput = {
    readonly clips: InputMaybe<AirtableClipFilterListInput>
    readonly count: InputMaybe<IntQueryOperatorInput>
    readonly publishedClipsCount: InputMaybe<IntQueryOperatorInput>
    readonly publishedTalksCount: InputMaybe<IntQueryOperatorInput>
    readonly talks: InputMaybe<AirtableTalkFilterListInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableTopicDataSortInput = {
    readonly clips: InputMaybe<AirtableClipSortInput>
    readonly count: InputMaybe<SortOrderEnum>
    readonly publishedClipsCount: InputMaybe<SortOrderEnum>
    readonly publishedTalksCount: InputMaybe<SortOrderEnum>
    readonly talks: InputMaybe<AirtableTalkSortInput>
    readonly title: InputMaybe<SortOrderEnum>
  }

  type AirtableTopicEdge = {
    readonly next: Maybe<AirtableTopic>
    readonly node: AirtableTopic
    readonly previous: Maybe<AirtableTopic>
  }

  type AirtableTopicFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly data: InputMaybe<AirtableTopicDataFieldSelector>
    readonly fields: InputMaybe<AirtableTopicFieldsFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly queryName: InputMaybe<FieldSelectorEnum>
    readonly recordId: InputMaybe<FieldSelectorEnum>
    readonly rowIndex: InputMaybe<FieldSelectorEnum>
    readonly table: InputMaybe<FieldSelectorEnum>
  }

  type AirtableTopicFields = {
    readonly id: Maybe<Scalars['String']>
    readonly slug: Maybe<Scalars['String']>
  }

  type AirtableTopicFieldsFieldSelector = {
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly slug: InputMaybe<FieldSelectorEnum>
  }

  type AirtableTopicFieldsFilterInput = {
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly slug: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableTopicFieldsSortInput = {
    readonly id: InputMaybe<SortOrderEnum>
    readonly slug: InputMaybe<SortOrderEnum>
  }

  type AirtableTopicFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly data: InputMaybe<AirtableTopicDataFilterInput>
    readonly fields: InputMaybe<AirtableTopicFieldsFilterInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly queryName: InputMaybe<StringQueryOperatorInput>
    readonly recordId: InputMaybe<StringQueryOperatorInput>
    readonly rowIndex: InputMaybe<IntQueryOperatorInput>
    readonly table: InputMaybe<StringQueryOperatorInput>
  }

  type AirtableTopicFilterListInput = {
    readonly elemMatch: InputMaybe<AirtableTopicFilterInput>
  }

  type AirtableTopicGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<AirtableTopicEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<AirtableTopicGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<AirtableTopic>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type AirtableTopicGroupConnection_distinctArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicGroupConnection_groupArgs = {
    field: AirtableTopicFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type AirtableTopicGroupConnection_maxArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicGroupConnection_minArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicGroupConnection_sumArgs = {
    field: AirtableTopicFieldSelector
  }

  type AirtableTopicSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly data: InputMaybe<AirtableTopicDataSortInput>
    readonly fields: InputMaybe<AirtableTopicFieldsSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly queryName: InputMaybe<SortOrderEnum>
    readonly recordId: InputMaybe<SortOrderEnum>
    readonly rowIndex: InputMaybe<SortOrderEnum>
    readonly table: InputMaybe<SortOrderEnum>
  }

  type BlurredOptions = {
    /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
    readonly toFormat: InputMaybe<ImageFormat>
    /** Width of the generated low-res preview. Default is 20px */
    readonly width: InputMaybe<Scalars['Int']>
  }

  type BooleanQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Boolean']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>
    readonly ne: InputMaybe<Scalars['Boolean']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>
  }

  type DateQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Date']>
    readonly gt: InputMaybe<Scalars['Date']>
    readonly gte: InputMaybe<Scalars['Date']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>
    readonly lt: InputMaybe<Scalars['Date']>
    readonly lte: InputMaybe<Scalars['Date']>
    readonly ne: InputMaybe<Scalars['Date']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>
  }

  type Directory = Node & {
    readonly absolutePath: Scalars['String']
    readonly accessTime: Scalars['Date']
    readonly atime: Scalars['Date']
    readonly atimeMs: Scalars['Float']
    readonly base: Scalars['String']
    readonly birthTime: Scalars['Date']
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars['Date']>
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars['Float']>
    readonly changeTime: Scalars['Date']
    readonly children: ReadonlyArray<Node>
    readonly ctime: Scalars['Date']
    readonly ctimeMs: Scalars['Float']
    readonly dev: Scalars['Int']
    readonly dir: Scalars['String']
    readonly ext: Scalars['String']
    readonly extension: Scalars['String']
    readonly gid: Scalars['Int']
    readonly id: Scalars['ID']
    readonly ino: Scalars['Float']
    readonly internal: Internal
    readonly mode: Scalars['Int']
    readonly modifiedTime: Scalars['Date']
    readonly mtime: Scalars['Date']
    readonly mtimeMs: Scalars['Float']
    readonly name: Scalars['String']
    readonly nlink: Scalars['Int']
    readonly parent: Maybe<Node>
    readonly prettySize: Scalars['String']
    readonly rdev: Scalars['Int']
    readonly relativeDirectory: Scalars['String']
    readonly relativePath: Scalars['String']
    readonly root: Scalars['String']
    readonly size: Scalars['Int']
    readonly sourceInstanceName: Scalars['String']
    readonly uid: Scalars['Int']
  }

  type Directory_accessTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_atimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_birthTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_changeTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_ctimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_modifiedTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type Directory_mtimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type DirectoryConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<DirectoryEdge>
    readonly group: ReadonlyArray<DirectoryGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Directory>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type DirectoryConnection_distinctArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryConnection_groupArgs = {
    field: DirectoryFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type DirectoryConnection_maxArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryConnection_minArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryConnection_sumArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryEdge = {
    readonly next: Maybe<Directory>
    readonly node: Directory
    readonly previous: Maybe<Directory>
  }

  type DirectoryFieldSelector = {
    readonly absolutePath: InputMaybe<FieldSelectorEnum>
    readonly accessTime: InputMaybe<FieldSelectorEnum>
    readonly atime: InputMaybe<FieldSelectorEnum>
    readonly atimeMs: InputMaybe<FieldSelectorEnum>
    readonly base: InputMaybe<FieldSelectorEnum>
    readonly birthTime: InputMaybe<FieldSelectorEnum>
    readonly birthtime: InputMaybe<FieldSelectorEnum>
    readonly birthtimeMs: InputMaybe<FieldSelectorEnum>
    readonly changeTime: InputMaybe<FieldSelectorEnum>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly ctime: InputMaybe<FieldSelectorEnum>
    readonly ctimeMs: InputMaybe<FieldSelectorEnum>
    readonly dev: InputMaybe<FieldSelectorEnum>
    readonly dir: InputMaybe<FieldSelectorEnum>
    readonly ext: InputMaybe<FieldSelectorEnum>
    readonly extension: InputMaybe<FieldSelectorEnum>
    readonly gid: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly ino: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly mode: InputMaybe<FieldSelectorEnum>
    readonly modifiedTime: InputMaybe<FieldSelectorEnum>
    readonly mtime: InputMaybe<FieldSelectorEnum>
    readonly mtimeMs: InputMaybe<FieldSelectorEnum>
    readonly name: InputMaybe<FieldSelectorEnum>
    readonly nlink: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly prettySize: InputMaybe<FieldSelectorEnum>
    readonly rdev: InputMaybe<FieldSelectorEnum>
    readonly relativeDirectory: InputMaybe<FieldSelectorEnum>
    readonly relativePath: InputMaybe<FieldSelectorEnum>
    readonly root: InputMaybe<FieldSelectorEnum>
    readonly size: InputMaybe<FieldSelectorEnum>
    readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>
    readonly uid: InputMaybe<FieldSelectorEnum>
  }

  type DirectoryFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>
    readonly accessTime: InputMaybe<DateQueryOperatorInput>
    readonly atime: InputMaybe<DateQueryOperatorInput>
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly base: InputMaybe<StringQueryOperatorInput>
    readonly birthTime: InputMaybe<DateQueryOperatorInput>
    readonly birthtime: InputMaybe<DateQueryOperatorInput>
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly changeTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly ctime: InputMaybe<DateQueryOperatorInput>
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly dev: InputMaybe<IntQueryOperatorInput>
    readonly dir: InputMaybe<StringQueryOperatorInput>
    readonly ext: InputMaybe<StringQueryOperatorInput>
    readonly extension: InputMaybe<StringQueryOperatorInput>
    readonly gid: InputMaybe<IntQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly ino: InputMaybe<FloatQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly mode: InputMaybe<IntQueryOperatorInput>
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>
    readonly mtime: InputMaybe<DateQueryOperatorInput>
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nlink: InputMaybe<IntQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly prettySize: InputMaybe<StringQueryOperatorInput>
    readonly rdev: InputMaybe<IntQueryOperatorInput>
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>
    readonly relativePath: InputMaybe<StringQueryOperatorInput>
    readonly root: InputMaybe<StringQueryOperatorInput>
    readonly size: InputMaybe<IntQueryOperatorInput>
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    readonly uid: InputMaybe<IntQueryOperatorInput>
  }

  type DirectoryGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<DirectoryEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<DirectoryGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Directory>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type DirectoryGroupConnection_distinctArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryGroupConnection_groupArgs = {
    field: DirectoryFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type DirectoryGroupConnection_maxArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryGroupConnection_minArgs = {
    field: DirectoryFieldSelector
  }

  type DirectoryGroupConnection_sumArgs = {
    field: DirectoryFieldSelector
  }

  type DirectorySortInput = {
    readonly absolutePath: InputMaybe<SortOrderEnum>
    readonly accessTime: InputMaybe<SortOrderEnum>
    readonly atime: InputMaybe<SortOrderEnum>
    readonly atimeMs: InputMaybe<SortOrderEnum>
    readonly base: InputMaybe<SortOrderEnum>
    readonly birthTime: InputMaybe<SortOrderEnum>
    readonly birthtime: InputMaybe<SortOrderEnum>
    readonly birthtimeMs: InputMaybe<SortOrderEnum>
    readonly changeTime: InputMaybe<SortOrderEnum>
    readonly children: InputMaybe<NodeSortInput>
    readonly ctime: InputMaybe<SortOrderEnum>
    readonly ctimeMs: InputMaybe<SortOrderEnum>
    readonly dev: InputMaybe<SortOrderEnum>
    readonly dir: InputMaybe<SortOrderEnum>
    readonly ext: InputMaybe<SortOrderEnum>
    readonly extension: InputMaybe<SortOrderEnum>
    readonly gid: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly ino: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly mode: InputMaybe<SortOrderEnum>
    readonly modifiedTime: InputMaybe<SortOrderEnum>
    readonly mtime: InputMaybe<SortOrderEnum>
    readonly mtimeMs: InputMaybe<SortOrderEnum>
    readonly name: InputMaybe<SortOrderEnum>
    readonly nlink: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly prettySize: InputMaybe<SortOrderEnum>
    readonly rdev: InputMaybe<SortOrderEnum>
    readonly relativeDirectory: InputMaybe<SortOrderEnum>
    readonly relativePath: InputMaybe<SortOrderEnum>
    readonly root: InputMaybe<SortOrderEnum>
    readonly size: InputMaybe<SortOrderEnum>
    readonly sourceInstanceName: InputMaybe<SortOrderEnum>
    readonly uid: InputMaybe<SortOrderEnum>
  }

  type DuotoneGradient = {
    readonly highlight: Scalars['String']
    readonly opacity: InputMaybe<Scalars['Int']>
    readonly shadow: Scalars['String']
  }

  type FieldSelectorEnum = 'SELECT'

  type File = Node & {
    readonly absolutePath: Scalars['String']
    readonly accessTime: Scalars['Date']
    readonly atime: Scalars['Date']
    readonly atimeMs: Scalars['Float']
    readonly base: Scalars['String']
    readonly birthTime: Scalars['Date']
    /** @deprecated Use `birthTime` instead */
    readonly birthtime: Maybe<Scalars['Date']>
    /** @deprecated Use `birthTime` instead */
    readonly birthtimeMs: Maybe<Scalars['Float']>
    readonly blksize: Maybe<Scalars['Int']>
    readonly blocks: Maybe<Scalars['Int']>
    readonly changeTime: Scalars['Date']
    /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
    readonly childImageSharp: Maybe<ImageSharp>
    readonly children: ReadonlyArray<Node>
    /** Returns all children nodes filtered by type ImageSharp */
    readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>
    readonly ctime: Scalars['Date']
    readonly ctimeMs: Scalars['Float']
    readonly dev: Scalars['Int']
    readonly dir: Scalars['String']
    readonly ext: Scalars['String']
    readonly extension: Scalars['String']
    readonly gid: Scalars['Int']
    readonly id: Scalars['ID']
    readonly ino: Scalars['Float']
    readonly internal: Internal
    readonly mode: Scalars['Int']
    readonly modifiedTime: Scalars['Date']
    readonly mtime: Scalars['Date']
    readonly mtimeMs: Scalars['Float']
    readonly name: Scalars['String']
    readonly nlink: Scalars['Int']
    readonly parent: Maybe<Node>
    readonly prettySize: Scalars['String']
    /** Copy file to static directory and return public url to it */
    readonly publicURL: Maybe<Scalars['String']>
    readonly rdev: Scalars['Int']
    readonly relativeDirectory: Scalars['String']
    readonly relativePath: Scalars['String']
    readonly root: Scalars['String']
    readonly size: Scalars['Int']
    readonly sourceInstanceName: Scalars['String']
    readonly uid: Scalars['Int']
    readonly url: Maybe<Scalars['String']>
  }

  type File_accessTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_atimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_birthTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_changeTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_ctimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_modifiedTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type File_mtimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type FileConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<FileEdge>
    readonly group: ReadonlyArray<FileGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<File>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type FileConnection_distinctArgs = {
    field: FileFieldSelector
  }

  type FileConnection_groupArgs = {
    field: FileFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type FileConnection_maxArgs = {
    field: FileFieldSelector
  }

  type FileConnection_minArgs = {
    field: FileFieldSelector
  }

  type FileConnection_sumArgs = {
    field: FileFieldSelector
  }

  type FileEdge = {
    readonly next: Maybe<File>
    readonly node: File
    readonly previous: Maybe<File>
  }

  type FileFieldSelector = {
    readonly absolutePath: InputMaybe<FieldSelectorEnum>
    readonly accessTime: InputMaybe<FieldSelectorEnum>
    readonly atime: InputMaybe<FieldSelectorEnum>
    readonly atimeMs: InputMaybe<FieldSelectorEnum>
    readonly base: InputMaybe<FieldSelectorEnum>
    readonly birthTime: InputMaybe<FieldSelectorEnum>
    readonly birthtime: InputMaybe<FieldSelectorEnum>
    readonly birthtimeMs: InputMaybe<FieldSelectorEnum>
    readonly blksize: InputMaybe<FieldSelectorEnum>
    readonly blocks: InputMaybe<FieldSelectorEnum>
    readonly changeTime: InputMaybe<FieldSelectorEnum>
    readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>
    readonly ctime: InputMaybe<FieldSelectorEnum>
    readonly ctimeMs: InputMaybe<FieldSelectorEnum>
    readonly dev: InputMaybe<FieldSelectorEnum>
    readonly dir: InputMaybe<FieldSelectorEnum>
    readonly ext: InputMaybe<FieldSelectorEnum>
    readonly extension: InputMaybe<FieldSelectorEnum>
    readonly gid: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly ino: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly mode: InputMaybe<FieldSelectorEnum>
    readonly modifiedTime: InputMaybe<FieldSelectorEnum>
    readonly mtime: InputMaybe<FieldSelectorEnum>
    readonly mtimeMs: InputMaybe<FieldSelectorEnum>
    readonly name: InputMaybe<FieldSelectorEnum>
    readonly nlink: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly prettySize: InputMaybe<FieldSelectorEnum>
    readonly publicURL: InputMaybe<FieldSelectorEnum>
    readonly rdev: InputMaybe<FieldSelectorEnum>
    readonly relativeDirectory: InputMaybe<FieldSelectorEnum>
    readonly relativePath: InputMaybe<FieldSelectorEnum>
    readonly root: InputMaybe<FieldSelectorEnum>
    readonly size: InputMaybe<FieldSelectorEnum>
    readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>
    readonly uid: InputMaybe<FieldSelectorEnum>
    readonly url: InputMaybe<FieldSelectorEnum>
  }

  type FileFilterInput = {
    readonly absolutePath: InputMaybe<StringQueryOperatorInput>
    readonly accessTime: InputMaybe<DateQueryOperatorInput>
    readonly atime: InputMaybe<DateQueryOperatorInput>
    readonly atimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly base: InputMaybe<StringQueryOperatorInput>
    readonly birthTime: InputMaybe<DateQueryOperatorInput>
    readonly birthtime: InputMaybe<DateQueryOperatorInput>
    readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly blksize: InputMaybe<IntQueryOperatorInput>
    readonly blocks: InputMaybe<IntQueryOperatorInput>
    readonly changeTime: InputMaybe<DateQueryOperatorInput>
    readonly childImageSharp: InputMaybe<ImageSharpFilterInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>
    readonly ctime: InputMaybe<DateQueryOperatorInput>
    readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly dev: InputMaybe<IntQueryOperatorInput>
    readonly dir: InputMaybe<StringQueryOperatorInput>
    readonly ext: InputMaybe<StringQueryOperatorInput>
    readonly extension: InputMaybe<StringQueryOperatorInput>
    readonly gid: InputMaybe<IntQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly ino: InputMaybe<FloatQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly mode: InputMaybe<IntQueryOperatorInput>
    readonly modifiedTime: InputMaybe<DateQueryOperatorInput>
    readonly mtime: InputMaybe<DateQueryOperatorInput>
    readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nlink: InputMaybe<IntQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly prettySize: InputMaybe<StringQueryOperatorInput>
    readonly publicURL: InputMaybe<StringQueryOperatorInput>
    readonly rdev: InputMaybe<IntQueryOperatorInput>
    readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>
    readonly relativePath: InputMaybe<StringQueryOperatorInput>
    readonly root: InputMaybe<StringQueryOperatorInput>
    readonly size: InputMaybe<IntQueryOperatorInput>
    readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    readonly uid: InputMaybe<IntQueryOperatorInput>
    readonly url: InputMaybe<StringQueryOperatorInput>
  }

  type FileFilterListInput = {
    readonly elemMatch: InputMaybe<FileFilterInput>
  }

  type FileGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<FileEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<FileGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<File>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type FileGroupConnection_distinctArgs = {
    field: FileFieldSelector
  }

  type FileGroupConnection_groupArgs = {
    field: FileFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type FileGroupConnection_maxArgs = {
    field: FileFieldSelector
  }

  type FileGroupConnection_minArgs = {
    field: FileFieldSelector
  }

  type FileGroupConnection_sumArgs = {
    field: FileFieldSelector
  }

  type FileSortInput = {
    readonly absolutePath: InputMaybe<SortOrderEnum>
    readonly accessTime: InputMaybe<SortOrderEnum>
    readonly atime: InputMaybe<SortOrderEnum>
    readonly atimeMs: InputMaybe<SortOrderEnum>
    readonly base: InputMaybe<SortOrderEnum>
    readonly birthTime: InputMaybe<SortOrderEnum>
    readonly birthtime: InputMaybe<SortOrderEnum>
    readonly birthtimeMs: InputMaybe<SortOrderEnum>
    readonly blksize: InputMaybe<SortOrderEnum>
    readonly blocks: InputMaybe<SortOrderEnum>
    readonly changeTime: InputMaybe<SortOrderEnum>
    readonly childImageSharp: InputMaybe<ImageSharpSortInput>
    readonly children: InputMaybe<NodeSortInput>
    readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>
    readonly ctime: InputMaybe<SortOrderEnum>
    readonly ctimeMs: InputMaybe<SortOrderEnum>
    readonly dev: InputMaybe<SortOrderEnum>
    readonly dir: InputMaybe<SortOrderEnum>
    readonly ext: InputMaybe<SortOrderEnum>
    readonly extension: InputMaybe<SortOrderEnum>
    readonly gid: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly ino: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly mode: InputMaybe<SortOrderEnum>
    readonly modifiedTime: InputMaybe<SortOrderEnum>
    readonly mtime: InputMaybe<SortOrderEnum>
    readonly mtimeMs: InputMaybe<SortOrderEnum>
    readonly name: InputMaybe<SortOrderEnum>
    readonly nlink: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly prettySize: InputMaybe<SortOrderEnum>
    readonly publicURL: InputMaybe<SortOrderEnum>
    readonly rdev: InputMaybe<SortOrderEnum>
    readonly relativeDirectory: InputMaybe<SortOrderEnum>
    readonly relativePath: InputMaybe<SortOrderEnum>
    readonly root: InputMaybe<SortOrderEnum>
    readonly size: InputMaybe<SortOrderEnum>
    readonly sourceInstanceName: InputMaybe<SortOrderEnum>
    readonly uid: InputMaybe<SortOrderEnum>
    readonly url: InputMaybe<SortOrderEnum>
  }

  type FloatQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Float']>
    readonly gt: InputMaybe<Scalars['Float']>
    readonly gte: InputMaybe<Scalars['Float']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
    readonly lt: InputMaybe<Scalars['Float']>
    readonly lte: InputMaybe<Scalars['Float']>
    readonly ne: InputMaybe<Scalars['Float']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
  }

  type GatsbyImageDataQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['GatsbyImageData']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>
    readonly ne: InputMaybe<Scalars['GatsbyImageData']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>
  }

  type GatsbyImageFormat = 'auto' | 'avif' | 'jpg' | '' | 'png' | 'webp'

  type GatsbyImageLayout = 'constrained' | 'fixed' | 'fullWidth'

  type GatsbyImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG'

  type ImageCropFocus = 17 | 0 | 2 | 16 | 1 | 5 | 8 | 3 | 6 | 7 | 4

  type ImageFit = 'contain' | 'cover' | 'fill' | 'inside' | 'outside'

  type ImageFormat = '' | 'avif' | 'jpg' | '' | 'png' | 'webp'

  type ImageLayout = 'constrained' | 'fixed' | 'fullWidth'

  type ImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG'

  type ImageSharp = Node & {
    readonly children: ReadonlyArray<Node>
    readonly fixed: Maybe<ImageSharpFixed>
    readonly fluid: Maybe<ImageSharpFluid>
    readonly gatsbyImageData: Scalars['GatsbyImageData']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly original: Maybe<ImageSharpOriginal>
    readonly parent: Maybe<Node>
    readonly resize: Maybe<ImageSharpResize>
  }

  type ImageSharp_fixedArgs = {
    background?: InputMaybe<Scalars['String']>
    base64Width: InputMaybe<Scalars['Int']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    height: InputMaybe<Scalars['Int']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    toFormat?: InputMaybe<ImageFormat>
    toFormatBase64?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_fluidArgs = {
    background?: InputMaybe<Scalars['String']>
    base64Width: InputMaybe<Scalars['Int']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    maxHeight: InputMaybe<Scalars['Int']>
    maxWidth: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    sizes?: InputMaybe<Scalars['String']>
    srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    toFormat?: InputMaybe<ImageFormat>
    toFormatBase64?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_gatsbyImageDataArgs = {
    aspectRatio: InputMaybe<Scalars['Float']>
    avifOptions: InputMaybe<AVIFOptions>
    backgroundColor: InputMaybe<Scalars['String']>
    blurredOptions: InputMaybe<BlurredOptions>
    breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>
    height: InputMaybe<Scalars['Int']>
    jpgOptions: InputMaybe<JPGOptions>
    layout?: InputMaybe<ImageLayout>
    outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>
    placeholder: InputMaybe<ImagePlaceholder>
    pngOptions: InputMaybe<PNGOptions>
    quality: InputMaybe<Scalars['Int']>
    sizes: InputMaybe<Scalars['String']>
    tracedSVGOptions: InputMaybe<Potrace>
    transformOptions: InputMaybe<TransformOptions>
    webpOptions: InputMaybe<WebPOptions>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharp_resizeArgs = {
    background?: InputMaybe<Scalars['String']>
    base64?: InputMaybe<Scalars['Boolean']>
    cropFocus?: InputMaybe<ImageCropFocus>
    duotone: InputMaybe<DuotoneGradient>
    fit?: InputMaybe<ImageFit>
    grayscale?: InputMaybe<Scalars['Boolean']>
    height: InputMaybe<Scalars['Int']>
    jpegProgressive?: InputMaybe<Scalars['Boolean']>
    jpegQuality: InputMaybe<Scalars['Int']>
    pngCompressionLevel?: InputMaybe<Scalars['Int']>
    pngCompressionSpeed?: InputMaybe<Scalars['Int']>
    pngQuality: InputMaybe<Scalars['Int']>
    quality: InputMaybe<Scalars['Int']>
    rotate?: InputMaybe<Scalars['Int']>
    toFormat?: InputMaybe<ImageFormat>
    traceSVG: InputMaybe<Potrace>
    trim?: InputMaybe<Scalars['Float']>
    webpQuality: InputMaybe<Scalars['Int']>
    width: InputMaybe<Scalars['Int']>
  }

  type ImageSharpConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<ImageSharpEdge>
    readonly group: ReadonlyArray<ImageSharpGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<ImageSharp>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type ImageSharpConnection_distinctArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpConnection_groupArgs = {
    field: ImageSharpFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type ImageSharpConnection_maxArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpConnection_minArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpConnection_sumArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpEdge = {
    readonly next: Maybe<ImageSharp>
    readonly node: ImageSharp
    readonly previous: Maybe<ImageSharp>
  }

  type ImageSharpFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>
    readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>
    readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly original: InputMaybe<ImageSharpOriginalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly resize: InputMaybe<ImageSharpResizeFieldSelector>
  }

  type ImageSharpFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly fixed: InputMaybe<ImageSharpFixedFilterInput>
    readonly fluid: InputMaybe<ImageSharpFluidFilterInput>
    readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly original: InputMaybe<ImageSharpOriginalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly resize: InputMaybe<ImageSharpResizeFilterInput>
  }

  type ImageSharpFilterListInput = {
    readonly elemMatch: InputMaybe<ImageSharpFilterInput>
  }

  type ImageSharpFixed = {
    readonly aspectRatio: Maybe<Scalars['Float']>
    readonly base64: Maybe<Scalars['String']>
    readonly height: Scalars['Float']
    readonly originalName: Maybe<Scalars['String']>
    readonly src: Scalars['String']
    readonly srcSet: Scalars['String']
    readonly srcSetWebp: Maybe<Scalars['String']>
    readonly srcWebp: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
    readonly width: Scalars['Float']
  }

  type ImageSharpFixedFieldSelector = {
    readonly aspectRatio: InputMaybe<FieldSelectorEnum>
    readonly base64: InputMaybe<FieldSelectorEnum>
    readonly height: InputMaybe<FieldSelectorEnum>
    readonly originalName: InputMaybe<FieldSelectorEnum>
    readonly src: InputMaybe<FieldSelectorEnum>
    readonly srcSet: InputMaybe<FieldSelectorEnum>
    readonly srcSetWebp: InputMaybe<FieldSelectorEnum>
    readonly srcWebp: InputMaybe<FieldSelectorEnum>
    readonly tracedSVG: InputMaybe<FieldSelectorEnum>
    readonly width: InputMaybe<FieldSelectorEnum>
  }

  type ImageSharpFixedFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly base64: InputMaybe<StringQueryOperatorInput>
    readonly height: InputMaybe<FloatQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly srcSet: InputMaybe<StringQueryOperatorInput>
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<FloatQueryOperatorInput>
  }

  type ImageSharpFixedSortInput = {
    readonly aspectRatio: InputMaybe<SortOrderEnum>
    readonly base64: InputMaybe<SortOrderEnum>
    readonly height: InputMaybe<SortOrderEnum>
    readonly originalName: InputMaybe<SortOrderEnum>
    readonly src: InputMaybe<SortOrderEnum>
    readonly srcSet: InputMaybe<SortOrderEnum>
    readonly srcSetWebp: InputMaybe<SortOrderEnum>
    readonly srcWebp: InputMaybe<SortOrderEnum>
    readonly tracedSVG: InputMaybe<SortOrderEnum>
    readonly width: InputMaybe<SortOrderEnum>
  }

  type ImageSharpFluid = {
    readonly aspectRatio: Scalars['Float']
    readonly base64: Maybe<Scalars['String']>
    readonly originalImg: Maybe<Scalars['String']>
    readonly originalName: Maybe<Scalars['String']>
    readonly presentationHeight: Scalars['Int']
    readonly presentationWidth: Scalars['Int']
    readonly sizes: Scalars['String']
    readonly src: Scalars['String']
    readonly srcSet: Scalars['String']
    readonly srcSetWebp: Maybe<Scalars['String']>
    readonly srcWebp: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
  }

  type ImageSharpFluidFieldSelector = {
    readonly aspectRatio: InputMaybe<FieldSelectorEnum>
    readonly base64: InputMaybe<FieldSelectorEnum>
    readonly originalImg: InputMaybe<FieldSelectorEnum>
    readonly originalName: InputMaybe<FieldSelectorEnum>
    readonly presentationHeight: InputMaybe<FieldSelectorEnum>
    readonly presentationWidth: InputMaybe<FieldSelectorEnum>
    readonly sizes: InputMaybe<FieldSelectorEnum>
    readonly src: InputMaybe<FieldSelectorEnum>
    readonly srcSet: InputMaybe<FieldSelectorEnum>
    readonly srcSetWebp: InputMaybe<FieldSelectorEnum>
    readonly srcWebp: InputMaybe<FieldSelectorEnum>
    readonly tracedSVG: InputMaybe<FieldSelectorEnum>
  }

  type ImageSharpFluidFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly base64: InputMaybe<StringQueryOperatorInput>
    readonly originalImg: InputMaybe<StringQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly presentationHeight: InputMaybe<IntQueryOperatorInput>
    readonly presentationWidth: InputMaybe<IntQueryOperatorInput>
    readonly sizes: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly srcSet: InputMaybe<StringQueryOperatorInput>
    readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>
    readonly srcWebp: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
  }

  type ImageSharpFluidSortInput = {
    readonly aspectRatio: InputMaybe<SortOrderEnum>
    readonly base64: InputMaybe<SortOrderEnum>
    readonly originalImg: InputMaybe<SortOrderEnum>
    readonly originalName: InputMaybe<SortOrderEnum>
    readonly presentationHeight: InputMaybe<SortOrderEnum>
    readonly presentationWidth: InputMaybe<SortOrderEnum>
    readonly sizes: InputMaybe<SortOrderEnum>
    readonly src: InputMaybe<SortOrderEnum>
    readonly srcSet: InputMaybe<SortOrderEnum>
    readonly srcSetWebp: InputMaybe<SortOrderEnum>
    readonly srcWebp: InputMaybe<SortOrderEnum>
    readonly tracedSVG: InputMaybe<SortOrderEnum>
  }

  type ImageSharpGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<ImageSharpEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<ImageSharpGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<ImageSharp>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type ImageSharpGroupConnection_distinctArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpGroupConnection_groupArgs = {
    field: ImageSharpFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type ImageSharpGroupConnection_maxArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpGroupConnection_minArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpGroupConnection_sumArgs = {
    field: ImageSharpFieldSelector
  }

  type ImageSharpOriginal = {
    readonly height: Maybe<Scalars['Float']>
    readonly src: Maybe<Scalars['String']>
    readonly width: Maybe<Scalars['Float']>
  }

  type ImageSharpOriginalFieldSelector = {
    readonly height: InputMaybe<FieldSelectorEnum>
    readonly src: InputMaybe<FieldSelectorEnum>
    readonly width: InputMaybe<FieldSelectorEnum>
  }

  type ImageSharpOriginalFilterInput = {
    readonly height: InputMaybe<FloatQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<FloatQueryOperatorInput>
  }

  type ImageSharpOriginalSortInput = {
    readonly height: InputMaybe<SortOrderEnum>
    readonly src: InputMaybe<SortOrderEnum>
    readonly width: InputMaybe<SortOrderEnum>
  }

  type ImageSharpResize = {
    readonly aspectRatio: Maybe<Scalars['Float']>
    readonly height: Maybe<Scalars['Int']>
    readonly originalName: Maybe<Scalars['String']>
    readonly src: Maybe<Scalars['String']>
    readonly tracedSVG: Maybe<Scalars['String']>
    readonly width: Maybe<Scalars['Int']>
  }

  type ImageSharpResizeFieldSelector = {
    readonly aspectRatio: InputMaybe<FieldSelectorEnum>
    readonly height: InputMaybe<FieldSelectorEnum>
    readonly originalName: InputMaybe<FieldSelectorEnum>
    readonly src: InputMaybe<FieldSelectorEnum>
    readonly tracedSVG: InputMaybe<FieldSelectorEnum>
    readonly width: InputMaybe<FieldSelectorEnum>
  }

  type ImageSharpResizeFilterInput = {
    readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>
    readonly height: InputMaybe<IntQueryOperatorInput>
    readonly originalName: InputMaybe<StringQueryOperatorInput>
    readonly src: InputMaybe<StringQueryOperatorInput>
    readonly tracedSVG: InputMaybe<StringQueryOperatorInput>
    readonly width: InputMaybe<IntQueryOperatorInput>
  }

  type ImageSharpResizeSortInput = {
    readonly aspectRatio: InputMaybe<SortOrderEnum>
    readonly height: InputMaybe<SortOrderEnum>
    readonly originalName: InputMaybe<SortOrderEnum>
    readonly src: InputMaybe<SortOrderEnum>
    readonly tracedSVG: InputMaybe<SortOrderEnum>
    readonly width: InputMaybe<SortOrderEnum>
  }

  type ImageSharpSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly fixed: InputMaybe<ImageSharpFixedSortInput>
    readonly fluid: InputMaybe<ImageSharpFluidSortInput>
    readonly gatsbyImageData: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly original: InputMaybe<ImageSharpOriginalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly resize: InputMaybe<ImageSharpResizeSortInput>
  }

  type IntQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['Int']>
    readonly gt: InputMaybe<Scalars['Int']>
    readonly gte: InputMaybe<Scalars['Int']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
    readonly lt: InputMaybe<Scalars['Int']>
    readonly lte: InputMaybe<Scalars['Int']>
    readonly ne: InputMaybe<Scalars['Int']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>
  }

  type Internal = {
    readonly content: Maybe<Scalars['String']>
    readonly contentDigest: Scalars['String']
    readonly contentFilePath: Maybe<Scalars['String']>
    readonly description: Maybe<Scalars['String']>
    readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly ignoreType: Maybe<Scalars['Boolean']>
    readonly mediaType: Maybe<Scalars['String']>
    readonly owner: Scalars['String']
    readonly type: Scalars['String']
  }

  type InternalFieldSelector = {
    readonly content: InputMaybe<FieldSelectorEnum>
    readonly contentDigest: InputMaybe<FieldSelectorEnum>
    readonly contentFilePath: InputMaybe<FieldSelectorEnum>
    readonly description: InputMaybe<FieldSelectorEnum>
    readonly fieldOwners: InputMaybe<FieldSelectorEnum>
    readonly ignoreType: InputMaybe<FieldSelectorEnum>
    readonly mediaType: InputMaybe<FieldSelectorEnum>
    readonly owner: InputMaybe<FieldSelectorEnum>
    readonly type: InputMaybe<FieldSelectorEnum>
  }

  type InternalFilterInput = {
    readonly content: InputMaybe<StringQueryOperatorInput>
    readonly contentDigest: InputMaybe<StringQueryOperatorInput>
    readonly contentFilePath: InputMaybe<StringQueryOperatorInput>
    readonly description: InputMaybe<StringQueryOperatorInput>
    readonly fieldOwners: InputMaybe<StringQueryOperatorInput>
    readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>
    readonly mediaType: InputMaybe<StringQueryOperatorInput>
    readonly owner: InputMaybe<StringQueryOperatorInput>
    readonly type: InputMaybe<StringQueryOperatorInput>
  }

  type InternalSortInput = {
    readonly content: InputMaybe<SortOrderEnum>
    readonly contentDigest: InputMaybe<SortOrderEnum>
    readonly contentFilePath: InputMaybe<SortOrderEnum>
    readonly description: InputMaybe<SortOrderEnum>
    readonly fieldOwners: InputMaybe<SortOrderEnum>
    readonly ignoreType: InputMaybe<SortOrderEnum>
    readonly mediaType: InputMaybe<SortOrderEnum>
    readonly owner: InputMaybe<SortOrderEnum>
    readonly type: InputMaybe<SortOrderEnum>
  }

  type JPGOptions = {
    readonly progressive: InputMaybe<Scalars['Boolean']>
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type JSONQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['JSON']>
    readonly glob: InputMaybe<Scalars['JSON']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>
    readonly ne: InputMaybe<Scalars['JSON']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>
    readonly regex: InputMaybe<Scalars['JSON']>
  }

  type MarkdownExcerptFormats = 'HTML' | 'MARKDOWN' | 'PLAIN'

  type MarkdownHeading = {
    readonly depth: Maybe<Scalars['Int']>
    readonly id: Maybe<Scalars['String']>
    readonly value: Maybe<Scalars['String']>
  }

  type MarkdownHeadingFieldSelector = {
    readonly depth: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly value: InputMaybe<FieldSelectorEnum>
  }

  type MarkdownHeadingFilterInput = {
    readonly depth: InputMaybe<IntQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly value: InputMaybe<StringQueryOperatorInput>
  }

  type MarkdownHeadingFilterListInput = {
    readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>
  }

  type MarkdownHeadingLevels = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'

  type MarkdownHeadingSortInput = {
    readonly depth: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly value: InputMaybe<SortOrderEnum>
  }

  type MarkdownRemark = Node & {
    readonly children: ReadonlyArray<Node>
    readonly excerpt: Maybe<Scalars['String']>
    readonly excerptAst: Maybe<Scalars['JSON']>
    readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>
    readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>
    readonly html: Maybe<Scalars['String']>
    readonly htmlAst: Maybe<Scalars['JSON']>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
    readonly rawMarkdownBody: Maybe<Scalars['String']>
    readonly tableOfContents: Maybe<Scalars['String']>
    readonly timeToRead: Maybe<Scalars['Int']>
    readonly wordCount: Maybe<MarkdownWordCount>
  }

  type MarkdownRemark_excerptArgs = {
    format?: InputMaybe<MarkdownExcerptFormats>
    pruneLength?: InputMaybe<Scalars['Int']>
    truncate?: InputMaybe<Scalars['Boolean']>
  }

  type MarkdownRemark_excerptAstArgs = {
    pruneLength?: InputMaybe<Scalars['Int']>
    truncate?: InputMaybe<Scalars['Boolean']>
  }

  type MarkdownRemark_headingsArgs = {
    depth: InputMaybe<MarkdownHeadingLevels>
  }

  type MarkdownRemark_tableOfContentsArgs = {
    absolute?: InputMaybe<Scalars['Boolean']>
    heading: InputMaybe<Scalars['String']>
    maxDepth: InputMaybe<Scalars['Int']>
    pathToSlugField?: InputMaybe<Scalars['String']>
  }

  type MarkdownRemarkConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<MarkdownRemark>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MarkdownRemarkConnection_distinctArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkConnection_groupArgs = {
    field: MarkdownRemarkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MarkdownRemarkConnection_maxArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkConnection_minArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkConnection_sumArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkEdge = {
    readonly next: Maybe<MarkdownRemark>
    readonly node: MarkdownRemark
    readonly previous: Maybe<MarkdownRemark>
  }

  type MarkdownRemarkFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly excerpt: InputMaybe<FieldSelectorEnum>
    readonly excerptAst: InputMaybe<FieldSelectorEnum>
    readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>
    readonly headings: InputMaybe<MarkdownHeadingFieldSelector>
    readonly html: InputMaybe<FieldSelectorEnum>
    readonly htmlAst: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>
    readonly tableOfContents: InputMaybe<FieldSelectorEnum>
    readonly timeToRead: InputMaybe<FieldSelectorEnum>
    readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>
  }

  type MarkdownRemarkFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly excerpt: InputMaybe<StringQueryOperatorInput>
    readonly excerptAst: InputMaybe<JSONQueryOperatorInput>
    readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>
    readonly headings: InputMaybe<MarkdownHeadingFilterListInput>
    readonly html: InputMaybe<StringQueryOperatorInput>
    readonly htmlAst: InputMaybe<JSONQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>
    readonly tableOfContents: InputMaybe<StringQueryOperatorInput>
    readonly timeToRead: InputMaybe<IntQueryOperatorInput>
    readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>
  }

  type MarkdownRemarkFilterListInput = {
    readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>
  }

  type MarkdownRemarkFrontmatter = {
    readonly title: Maybe<Scalars['String']>
  }

  type MarkdownRemarkFrontmatterFieldSelector = {
    readonly title: InputMaybe<FieldSelectorEnum>
  }

  type MarkdownRemarkFrontmatterFilterInput = {
    readonly title: InputMaybe<StringQueryOperatorInput>
  }

  type MarkdownRemarkFrontmatterSortInput = {
    readonly title: InputMaybe<SortOrderEnum>
  }

  type MarkdownRemarkGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<MarkdownRemarkEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<MarkdownRemark>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type MarkdownRemarkGroupConnection_distinctArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkGroupConnection_groupArgs = {
    field: MarkdownRemarkFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type MarkdownRemarkGroupConnection_maxArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkGroupConnection_minArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkGroupConnection_sumArgs = {
    field: MarkdownRemarkFieldSelector
  }

  type MarkdownRemarkSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly excerpt: InputMaybe<SortOrderEnum>
    readonly excerptAst: InputMaybe<SortOrderEnum>
    readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>
    readonly headings: InputMaybe<MarkdownHeadingSortInput>
    readonly html: InputMaybe<SortOrderEnum>
    readonly htmlAst: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
    readonly rawMarkdownBody: InputMaybe<SortOrderEnum>
    readonly tableOfContents: InputMaybe<SortOrderEnum>
    readonly timeToRead: InputMaybe<SortOrderEnum>
    readonly wordCount: InputMaybe<MarkdownWordCountSortInput>
  }

  type MarkdownWordCount = {
    readonly paragraphs: Maybe<Scalars['Int']>
    readonly sentences: Maybe<Scalars['Int']>
    readonly words: Maybe<Scalars['Int']>
  }

  type MarkdownWordCountFieldSelector = {
    readonly paragraphs: InputMaybe<FieldSelectorEnum>
    readonly sentences: InputMaybe<FieldSelectorEnum>
    readonly words: InputMaybe<FieldSelectorEnum>
  }

  type MarkdownWordCountFilterInput = {
    readonly paragraphs: InputMaybe<IntQueryOperatorInput>
    readonly sentences: InputMaybe<IntQueryOperatorInput>
    readonly words: InputMaybe<IntQueryOperatorInput>
  }

  type MarkdownWordCountSortInput = {
    readonly paragraphs: InputMaybe<SortOrderEnum>
    readonly sentences: InputMaybe<SortOrderEnum>
    readonly words: InputMaybe<SortOrderEnum>
  }

  /** Node Interface */
  type Node = {
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
  }

  type NodeFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
  }

  type NodeFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type NodeFilterListInput = {
    readonly elemMatch: InputMaybe<NodeFilterInput>
  }

  type NodeSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
  }

  type PNGOptions = {
    readonly compressionSpeed: InputMaybe<Scalars['Int']>
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type PageInfo = {
    readonly currentPage: Scalars['Int']
    readonly hasNextPage: Scalars['Boolean']
    readonly hasPreviousPage: Scalars['Boolean']
    readonly itemCount: Scalars['Int']
    readonly pageCount: Scalars['Int']
    readonly perPage: Maybe<Scalars['Int']>
    readonly totalCount: Scalars['Int']
  }

  type Potrace = {
    readonly alphaMax: InputMaybe<Scalars['Float']>
    readonly background: InputMaybe<Scalars['String']>
    readonly blackOnWhite: InputMaybe<Scalars['Boolean']>
    readonly color: InputMaybe<Scalars['String']>
    readonly optCurve: InputMaybe<Scalars['Boolean']>
    readonly optTolerance: InputMaybe<Scalars['Float']>
    readonly threshold: InputMaybe<Scalars['Int']>
    readonly turdSize: InputMaybe<Scalars['Float']>
    readonly turnPolicy: InputMaybe<PotraceTurnPolicy>
  }

  type PotraceTurnPolicy = 'black' | 'left' | 'majority' | 'minority' | 'right' | 'white'

  type Query = {
    readonly airtableAffiliateLink: Maybe<AirtableAffiliateLink>
    readonly airtableClip: Maybe<AirtableClip>
    readonly airtableField: Maybe<AirtableField>
    readonly airtablePage: Maybe<AirtablePage>
    readonly airtableScripture: Maybe<AirtableScripture>
    readonly airtableSerie: Maybe<AirtableSerie>
    readonly airtableSpeaker: Maybe<AirtableSpeaker>
    readonly airtableTalk: Maybe<AirtableTalk>
    readonly airtableTopic: Maybe<AirtableTopic>
    readonly allAirtableAffiliateLink: AirtableAffiliateLinkConnection
    readonly allAirtableClip: AirtableClipConnection
    readonly allAirtableField: AirtableFieldConnection
    readonly allAirtablePage: AirtablePageConnection
    readonly allAirtableScripture: AirtableScriptureConnection
    readonly allAirtableSerie: AirtableSerieConnection
    readonly allAirtableSpeaker: AirtableSpeakerConnection
    readonly allAirtableTalk: AirtableTalkConnection
    readonly allAirtableTopic: AirtableTopicConnection
    readonly allDirectory: DirectoryConnection
    readonly allFile: FileConnection
    readonly allImageSharp: ImageSharpConnection
    readonly allMarkdownRemark: MarkdownRemarkConnection
    readonly allSite: SiteConnection
    readonly allSiteBuildMetadata: SiteBuildMetadataConnection
    readonly allSiteFunction: SiteFunctionConnection
    readonly allSitePage: SitePageConnection
    readonly allSitePlugin: SitePluginConnection
    readonly directory: Maybe<Directory>
    readonly file: Maybe<File>
    readonly imageSharp: Maybe<ImageSharp>
    readonly markdownRemark: Maybe<MarkdownRemark>
    readonly site: Maybe<Site>
    readonly siteBuildMetadata: Maybe<SiteBuildMetadata>
    readonly siteFunction: Maybe<SiteFunction>
    readonly sitePage: Maybe<SitePage>
    readonly sitePlugin: Maybe<SitePlugin>
  }

  type Query_airtableAffiliateLinkArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableAffiliateLinkDataFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableClipArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableClipDataFilterInput>
    fields: InputMaybe<AirtableClipFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableFieldArgs = {
    childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>
    children: InputMaybe<NodeFilterListInput>
    childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    localFiles: InputMaybe<FileFilterListInput>
    parent: InputMaybe<NodeFilterInput>
  }

  type Query_airtablePageArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtablePageDataFilterInput>
    fields: InputMaybe<AirtablePageFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableScriptureArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableScriptureDataFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableSerieArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableSerieDataFilterInput>
    fields: InputMaybe<AirtableSerieFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableSpeakerArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableSpeakerDataFilterInput>
    fields: InputMaybe<AirtableSpeakerFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableTalkArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableTalkDataFilterInput>
    fields: InputMaybe<AirtableTalkFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_airtableTopicArgs = {
    children: InputMaybe<NodeFilterListInput>
    data: InputMaybe<AirtableTopicDataFilterInput>
    fields: InputMaybe<AirtableTopicFieldsFilterInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    queryName: InputMaybe<StringQueryOperatorInput>
    recordId: InputMaybe<StringQueryOperatorInput>
    rowIndex: InputMaybe<IntQueryOperatorInput>
    table: InputMaybe<StringQueryOperatorInput>
  }

  type Query_allAirtableAffiliateLinkArgs = {
    filter: InputMaybe<AirtableAffiliateLinkFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableAffiliateLinkSortInput>>>
  }

  type Query_allAirtableClipArgs = {
    filter: InputMaybe<AirtableClipFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableClipSortInput>>>
  }

  type Query_allAirtableFieldArgs = {
    filter: InputMaybe<AirtableFieldFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableFieldSortInput>>>
  }

  type Query_allAirtablePageArgs = {
    filter: InputMaybe<AirtablePageFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtablePageSortInput>>>
  }

  type Query_allAirtableScriptureArgs = {
    filter: InputMaybe<AirtableScriptureFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableScriptureSortInput>>>
  }

  type Query_allAirtableSerieArgs = {
    filter: InputMaybe<AirtableSerieFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableSerieSortInput>>>
  }

  type Query_allAirtableSpeakerArgs = {
    filter: InputMaybe<AirtableSpeakerFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableSpeakerSortInput>>>
  }

  type Query_allAirtableTalkArgs = {
    filter: InputMaybe<AirtableTalkFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableTalkSortInput>>>
  }

  type Query_allAirtableTopicArgs = {
    filter: InputMaybe<AirtableTopicFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<AirtableTopicSortInput>>>
  }

  type Query_allDirectoryArgs = {
    filter: InputMaybe<DirectoryFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>
  }

  type Query_allFileArgs = {
    filter: InputMaybe<FileFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>
  }

  type Query_allImageSharpArgs = {
    filter: InputMaybe<ImageSharpFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>
  }

  type Query_allMarkdownRemarkArgs = {
    filter: InputMaybe<MarkdownRemarkFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>
  }

  type Query_allSiteArgs = {
    filter: InputMaybe<SiteFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>
  }

  type Query_allSiteBuildMetadataArgs = {
    filter: InputMaybe<SiteBuildMetadataFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>
  }

  type Query_allSiteFunctionArgs = {
    filter: InputMaybe<SiteFunctionFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>
  }

  type Query_allSitePageArgs = {
    filter: InputMaybe<SitePageFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>
  }

  type Query_allSitePluginArgs = {
    filter: InputMaybe<SitePluginFilterInput>
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
    sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>
  }

  type Query_directoryArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>
    accessTime: InputMaybe<DateQueryOperatorInput>
    atime: InputMaybe<DateQueryOperatorInput>
    atimeMs: InputMaybe<FloatQueryOperatorInput>
    base: InputMaybe<StringQueryOperatorInput>
    birthTime: InputMaybe<DateQueryOperatorInput>
    birthtime: InputMaybe<DateQueryOperatorInput>
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    changeTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    ctime: InputMaybe<DateQueryOperatorInput>
    ctimeMs: InputMaybe<FloatQueryOperatorInput>
    dev: InputMaybe<IntQueryOperatorInput>
    dir: InputMaybe<StringQueryOperatorInput>
    ext: InputMaybe<StringQueryOperatorInput>
    extension: InputMaybe<StringQueryOperatorInput>
    gid: InputMaybe<IntQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    ino: InputMaybe<FloatQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    mode: InputMaybe<IntQueryOperatorInput>
    modifiedTime: InputMaybe<DateQueryOperatorInput>
    mtime: InputMaybe<DateQueryOperatorInput>
    mtimeMs: InputMaybe<FloatQueryOperatorInput>
    name: InputMaybe<StringQueryOperatorInput>
    nlink: InputMaybe<IntQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    prettySize: InputMaybe<StringQueryOperatorInput>
    rdev: InputMaybe<IntQueryOperatorInput>
    relativeDirectory: InputMaybe<StringQueryOperatorInput>
    relativePath: InputMaybe<StringQueryOperatorInput>
    root: InputMaybe<StringQueryOperatorInput>
    size: InputMaybe<IntQueryOperatorInput>
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    uid: InputMaybe<IntQueryOperatorInput>
  }

  type Query_fileArgs = {
    absolutePath: InputMaybe<StringQueryOperatorInput>
    accessTime: InputMaybe<DateQueryOperatorInput>
    atime: InputMaybe<DateQueryOperatorInput>
    atimeMs: InputMaybe<FloatQueryOperatorInput>
    base: InputMaybe<StringQueryOperatorInput>
    birthTime: InputMaybe<DateQueryOperatorInput>
    birthtime: InputMaybe<DateQueryOperatorInput>
    birthtimeMs: InputMaybe<FloatQueryOperatorInput>
    blksize: InputMaybe<IntQueryOperatorInput>
    blocks: InputMaybe<IntQueryOperatorInput>
    changeTime: InputMaybe<DateQueryOperatorInput>
    childImageSharp: InputMaybe<ImageSharpFilterInput>
    children: InputMaybe<NodeFilterListInput>
    childrenImageSharp: InputMaybe<ImageSharpFilterListInput>
    ctime: InputMaybe<DateQueryOperatorInput>
    ctimeMs: InputMaybe<FloatQueryOperatorInput>
    dev: InputMaybe<IntQueryOperatorInput>
    dir: InputMaybe<StringQueryOperatorInput>
    ext: InputMaybe<StringQueryOperatorInput>
    extension: InputMaybe<StringQueryOperatorInput>
    gid: InputMaybe<IntQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    ino: InputMaybe<FloatQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    mode: InputMaybe<IntQueryOperatorInput>
    modifiedTime: InputMaybe<DateQueryOperatorInput>
    mtime: InputMaybe<DateQueryOperatorInput>
    mtimeMs: InputMaybe<FloatQueryOperatorInput>
    name: InputMaybe<StringQueryOperatorInput>
    nlink: InputMaybe<IntQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    prettySize: InputMaybe<StringQueryOperatorInput>
    publicURL: InputMaybe<StringQueryOperatorInput>
    rdev: InputMaybe<IntQueryOperatorInput>
    relativeDirectory: InputMaybe<StringQueryOperatorInput>
    relativePath: InputMaybe<StringQueryOperatorInput>
    root: InputMaybe<StringQueryOperatorInput>
    size: InputMaybe<IntQueryOperatorInput>
    sourceInstanceName: InputMaybe<StringQueryOperatorInput>
    uid: InputMaybe<IntQueryOperatorInput>
    url: InputMaybe<StringQueryOperatorInput>
  }

  type Query_imageSharpArgs = {
    children: InputMaybe<NodeFilterListInput>
    fixed: InputMaybe<ImageSharpFixedFilterInput>
    fluid: InputMaybe<ImageSharpFluidFilterInput>
    gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    original: InputMaybe<ImageSharpOriginalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    resize: InputMaybe<ImageSharpResizeFilterInput>
  }

  type Query_markdownRemarkArgs = {
    children: InputMaybe<NodeFilterListInput>
    excerpt: InputMaybe<StringQueryOperatorInput>
    excerptAst: InputMaybe<JSONQueryOperatorInput>
    frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>
    headings: InputMaybe<MarkdownHeadingFilterListInput>
    html: InputMaybe<StringQueryOperatorInput>
    htmlAst: InputMaybe<JSONQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
    rawMarkdownBody: InputMaybe<StringQueryOperatorInput>
    tableOfContents: InputMaybe<StringQueryOperatorInput>
    timeToRead: InputMaybe<IntQueryOperatorInput>
    wordCount: InputMaybe<MarkdownWordCountFilterInput>
  }

  type Query_siteArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>
    host: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    jsxRuntime: InputMaybe<StringQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pathPrefix: InputMaybe<StringQueryOperatorInput>
    polyfill: InputMaybe<BooleanQueryOperatorInput>
    port: InputMaybe<IntQueryOperatorInput>
    siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>
    trailingSlash: InputMaybe<StringQueryOperatorInput>
  }

  type Query_siteBuildMetadataArgs = {
    buildTime: InputMaybe<DateQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    parent: InputMaybe<NodeFilterInput>
  }

  type Query_siteFunctionArgs = {
    absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    functionRoute: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    matchPath: InputMaybe<StringQueryOperatorInput>
    originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>
    originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pluginName: InputMaybe<StringQueryOperatorInput>
    relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>
  }

  type Query_sitePageArgs = {
    children: InputMaybe<NodeFilterListInput>
    component: InputMaybe<StringQueryOperatorInput>
    componentChunkName: InputMaybe<StringQueryOperatorInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    internalComponentName: InputMaybe<StringQueryOperatorInput>
    matchPath: InputMaybe<StringQueryOperatorInput>
    pageContext: InputMaybe<JSONQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    path: InputMaybe<StringQueryOperatorInput>
    pluginCreator: InputMaybe<SitePluginFilterInput>
  }

  type Query_sitePluginArgs = {
    browserAPIs: InputMaybe<StringQueryOperatorInput>
    children: InputMaybe<NodeFilterListInput>
    id: InputMaybe<StringQueryOperatorInput>
    internal: InputMaybe<InternalFilterInput>
    name: InputMaybe<StringQueryOperatorInput>
    nodeAPIs: InputMaybe<StringQueryOperatorInput>
    packageJson: InputMaybe<JSONQueryOperatorInput>
    parent: InputMaybe<NodeFilterInput>
    pluginFilepath: InputMaybe<StringQueryOperatorInput>
    pluginOptions: InputMaybe<JSONQueryOperatorInput>
    resolve: InputMaybe<StringQueryOperatorInput>
    ssrAPIs: InputMaybe<StringQueryOperatorInput>
    version: InputMaybe<StringQueryOperatorInput>
  }

  type Site = Node & {
    readonly buildTime: Maybe<Scalars['Date']>
    readonly children: ReadonlyArray<Node>
    readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>
    readonly host: Maybe<Scalars['String']>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly jsxRuntime: Maybe<Scalars['String']>
    readonly parent: Maybe<Node>
    readonly pathPrefix: Maybe<Scalars['String']>
    readonly polyfill: Maybe<Scalars['Boolean']>
    readonly port: Maybe<Scalars['Int']>
    readonly siteMetadata: Maybe<SiteSiteMetadata>
    readonly trailingSlash: Maybe<Scalars['String']>
  }

  type Site_buildTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type SiteBuildMetadata = Node & {
    readonly buildTime: Maybe<Scalars['Date']>
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly parent: Maybe<Node>
  }

  type SiteBuildMetadata_buildTimeArgs = {
    difference: InputMaybe<Scalars['String']>
    formatString: InputMaybe<Scalars['String']>
    fromNow: InputMaybe<Scalars['Boolean']>
    locale: InputMaybe<Scalars['String']>
  }

  type SiteBuildMetadataConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteBuildMetadata>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteBuildMetadataConnection_distinctArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataConnection_groupArgs = {
    field: SiteBuildMetadataFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteBuildMetadataConnection_maxArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataConnection_minArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataConnection_sumArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataEdge = {
    readonly next: Maybe<SiteBuildMetadata>
    readonly node: SiteBuildMetadata
    readonly previous: Maybe<SiteBuildMetadata>
  }

  type SiteBuildMetadataFieldSelector = {
    readonly buildTime: InputMaybe<FieldSelectorEnum>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly parent: InputMaybe<NodeFieldSelector>
  }

  type SiteBuildMetadataFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly parent: InputMaybe<NodeFilterInput>
  }

  type SiteBuildMetadataGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteBuildMetadataEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteBuildMetadata>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteBuildMetadataGroupConnection_distinctArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataGroupConnection_groupArgs = {
    field: SiteBuildMetadataFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteBuildMetadataGroupConnection_maxArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataGroupConnection_minArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataGroupConnection_sumArgs = {
    field: SiteBuildMetadataFieldSelector
  }

  type SiteBuildMetadataSortInput = {
    readonly buildTime: InputMaybe<SortOrderEnum>
    readonly children: InputMaybe<NodeSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly parent: InputMaybe<NodeSortInput>
  }

  type SiteConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteEdge>
    readonly group: ReadonlyArray<SiteGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Site>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteConnection_distinctArgs = {
    field: SiteFieldSelector
  }

  type SiteConnection_groupArgs = {
    field: SiteFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteConnection_maxArgs = {
    field: SiteFieldSelector
  }

  type SiteConnection_minArgs = {
    field: SiteFieldSelector
  }

  type SiteConnection_sumArgs = {
    field: SiteFieldSelector
  }

  type SiteEdge = {
    readonly next: Maybe<Site>
    readonly node: Site
    readonly previous: Maybe<Site>
  }

  type SiteFieldSelector = {
    readonly buildTime: InputMaybe<FieldSelectorEnum>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>
    readonly host: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly jsxRuntime: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly pathPrefix: InputMaybe<FieldSelectorEnum>
    readonly polyfill: InputMaybe<FieldSelectorEnum>
    readonly port: InputMaybe<FieldSelectorEnum>
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>
    readonly trailingSlash: InputMaybe<FieldSelectorEnum>
  }

  type SiteFilterInput = {
    readonly buildTime: InputMaybe<DateQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>
    readonly host: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pathPrefix: InputMaybe<StringQueryOperatorInput>
    readonly polyfill: InputMaybe<BooleanQueryOperatorInput>
    readonly port: InputMaybe<IntQueryOperatorInput>
    readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>
    readonly trailingSlash: InputMaybe<StringQueryOperatorInput>
  }

  type SiteFunction = Node & {
    readonly absoluteCompiledFilePath: Scalars['String']
    readonly children: ReadonlyArray<Node>
    readonly functionRoute: Scalars['String']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly matchPath: Maybe<Scalars['String']>
    readonly originalAbsoluteFilePath: Scalars['String']
    readonly originalRelativeFilePath: Scalars['String']
    readonly parent: Maybe<Node>
    readonly pluginName: Scalars['String']
    readonly relativeCompiledFilePath: Scalars['String']
  }

  type SiteFunctionConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteFunctionEdge>
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteFunction>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteFunctionConnection_distinctArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionConnection_groupArgs = {
    field: SiteFunctionFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteFunctionConnection_maxArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionConnection_minArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionConnection_sumArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionEdge = {
    readonly next: Maybe<SiteFunction>
    readonly node: SiteFunction
    readonly previous: Maybe<SiteFunction>
  }

  type SiteFunctionFieldSelector = {
    readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly functionRoute: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly matchPath: InputMaybe<FieldSelectorEnum>
    readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>
    readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly pluginName: InputMaybe<FieldSelectorEnum>
    readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>
  }

  type SiteFunctionFilterInput = {
    readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly functionRoute: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly matchPath: InputMaybe<StringQueryOperatorInput>
    readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>
    readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pluginName: InputMaybe<StringQueryOperatorInput>
    readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>
  }

  type SiteFunctionGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteFunctionEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteFunctionGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SiteFunction>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteFunctionGroupConnection_distinctArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionGroupConnection_groupArgs = {
    field: SiteFunctionFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteFunctionGroupConnection_maxArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionGroupConnection_minArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionGroupConnection_sumArgs = {
    field: SiteFunctionFieldSelector
  }

  type SiteFunctionSortInput = {
    readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>
    readonly children: InputMaybe<NodeSortInput>
    readonly functionRoute: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly matchPath: InputMaybe<SortOrderEnum>
    readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>
    readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly pluginName: InputMaybe<SortOrderEnum>
    readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>
  }

  type SiteGraphqlTypegen = {
    readonly generateOnBuild: Maybe<Scalars['Boolean']>
    readonly typesOutputPath: Maybe<Scalars['String']>
  }

  type SiteGraphqlTypegenFieldSelector = {
    readonly generateOnBuild: InputMaybe<FieldSelectorEnum>
    readonly typesOutputPath: InputMaybe<FieldSelectorEnum>
  }

  type SiteGraphqlTypegenFilterInput = {
    readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>
    readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>
  }

  type SiteGraphqlTypegenSortInput = {
    readonly generateOnBuild: InputMaybe<SortOrderEnum>
    readonly typesOutputPath: InputMaybe<SortOrderEnum>
  }

  type SiteGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SiteEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SiteGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<Site>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SiteGroupConnection_distinctArgs = {
    field: SiteFieldSelector
  }

  type SiteGroupConnection_groupArgs = {
    field: SiteFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SiteGroupConnection_maxArgs = {
    field: SiteFieldSelector
  }

  type SiteGroupConnection_minArgs = {
    field: SiteFieldSelector
  }

  type SiteGroupConnection_sumArgs = {
    field: SiteFieldSelector
  }

  type SitePage = Node & {
    readonly children: ReadonlyArray<Node>
    readonly component: Scalars['String']
    readonly componentChunkName: Scalars['String']
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly internalComponentName: Scalars['String']
    readonly matchPath: Maybe<Scalars['String']>
    readonly pageContext: Maybe<Scalars['JSON']>
    readonly parent: Maybe<Node>
    readonly path: Scalars['String']
    readonly pluginCreator: Maybe<SitePlugin>
  }

  type SitePageConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePageEdge>
    readonly group: ReadonlyArray<SitePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePageConnection_distinctArgs = {
    field: SitePageFieldSelector
  }

  type SitePageConnection_groupArgs = {
    field: SitePageFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePageConnection_maxArgs = {
    field: SitePageFieldSelector
  }

  type SitePageConnection_minArgs = {
    field: SitePageFieldSelector
  }

  type SitePageConnection_sumArgs = {
    field: SitePageFieldSelector
  }

  type SitePageEdge = {
    readonly next: Maybe<SitePage>
    readonly node: SitePage
    readonly previous: Maybe<SitePage>
  }

  type SitePageFieldSelector = {
    readonly children: InputMaybe<NodeFieldSelector>
    readonly component: InputMaybe<FieldSelectorEnum>
    readonly componentChunkName: InputMaybe<FieldSelectorEnum>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly internalComponentName: InputMaybe<FieldSelectorEnum>
    readonly matchPath: InputMaybe<FieldSelectorEnum>
    readonly pageContext: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly path: InputMaybe<FieldSelectorEnum>
    readonly pluginCreator: InputMaybe<SitePluginFieldSelector>
  }

  type SitePageFilterInput = {
    readonly children: InputMaybe<NodeFilterListInput>
    readonly component: InputMaybe<StringQueryOperatorInput>
    readonly componentChunkName: InputMaybe<StringQueryOperatorInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly internalComponentName: InputMaybe<StringQueryOperatorInput>
    readonly matchPath: InputMaybe<StringQueryOperatorInput>
    readonly pageContext: InputMaybe<JSONQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly path: InputMaybe<StringQueryOperatorInput>
    readonly pluginCreator: InputMaybe<SitePluginFilterInput>
  }

  type SitePageGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePageEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SitePageGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePage>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePageGroupConnection_distinctArgs = {
    field: SitePageFieldSelector
  }

  type SitePageGroupConnection_groupArgs = {
    field: SitePageFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePageGroupConnection_maxArgs = {
    field: SitePageFieldSelector
  }

  type SitePageGroupConnection_minArgs = {
    field: SitePageFieldSelector
  }

  type SitePageGroupConnection_sumArgs = {
    field: SitePageFieldSelector
  }

  type SitePageSortInput = {
    readonly children: InputMaybe<NodeSortInput>
    readonly component: InputMaybe<SortOrderEnum>
    readonly componentChunkName: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly internalComponentName: InputMaybe<SortOrderEnum>
    readonly matchPath: InputMaybe<SortOrderEnum>
    readonly pageContext: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly path: InputMaybe<SortOrderEnum>
    readonly pluginCreator: InputMaybe<SitePluginSortInput>
  }

  type SitePlugin = Node & {
    readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly children: ReadonlyArray<Node>
    readonly id: Scalars['ID']
    readonly internal: Internal
    readonly name: Maybe<Scalars['String']>
    readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly packageJson: Maybe<Scalars['JSON']>
    readonly parent: Maybe<Node>
    readonly pluginFilepath: Maybe<Scalars['String']>
    readonly pluginOptions: Maybe<Scalars['JSON']>
    readonly resolve: Maybe<Scalars['String']>
    readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>
    readonly version: Maybe<Scalars['String']>
  }

  type SitePluginConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePluginEdge>
    readonly group: ReadonlyArray<SitePluginGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePlugin>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePluginConnection_distinctArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginConnection_groupArgs = {
    field: SitePluginFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePluginConnection_maxArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginConnection_minArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginConnection_sumArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginEdge = {
    readonly next: Maybe<SitePlugin>
    readonly node: SitePlugin
    readonly previous: Maybe<SitePlugin>
  }

  type SitePluginFieldSelector = {
    readonly browserAPIs: InputMaybe<FieldSelectorEnum>
    readonly children: InputMaybe<NodeFieldSelector>
    readonly id: InputMaybe<FieldSelectorEnum>
    readonly internal: InputMaybe<InternalFieldSelector>
    readonly name: InputMaybe<FieldSelectorEnum>
    readonly nodeAPIs: InputMaybe<FieldSelectorEnum>
    readonly packageJson: InputMaybe<FieldSelectorEnum>
    readonly parent: InputMaybe<NodeFieldSelector>
    readonly pluginFilepath: InputMaybe<FieldSelectorEnum>
    readonly pluginOptions: InputMaybe<FieldSelectorEnum>
    readonly resolve: InputMaybe<FieldSelectorEnum>
    readonly ssrAPIs: InputMaybe<FieldSelectorEnum>
    readonly version: InputMaybe<FieldSelectorEnum>
  }

  type SitePluginFilterInput = {
    readonly browserAPIs: InputMaybe<StringQueryOperatorInput>
    readonly children: InputMaybe<NodeFilterListInput>
    readonly id: InputMaybe<StringQueryOperatorInput>
    readonly internal: InputMaybe<InternalFilterInput>
    readonly name: InputMaybe<StringQueryOperatorInput>
    readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>
    readonly packageJson: InputMaybe<JSONQueryOperatorInput>
    readonly parent: InputMaybe<NodeFilterInput>
    readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>
    readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>
    readonly resolve: InputMaybe<StringQueryOperatorInput>
    readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>
    readonly version: InputMaybe<StringQueryOperatorInput>
  }

  type SitePluginGroupConnection = {
    readonly distinct: ReadonlyArray<Scalars['String']>
    readonly edges: ReadonlyArray<SitePluginEdge>
    readonly field: Scalars['String']
    readonly fieldValue: Maybe<Scalars['String']>
    readonly group: ReadonlyArray<SitePluginGroupConnection>
    readonly max: Maybe<Scalars['Float']>
    readonly min: Maybe<Scalars['Float']>
    readonly nodes: ReadonlyArray<SitePlugin>
    readonly pageInfo: PageInfo
    readonly sum: Maybe<Scalars['Float']>
    readonly totalCount: Scalars['Int']
  }

  type SitePluginGroupConnection_distinctArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginGroupConnection_groupArgs = {
    field: SitePluginFieldSelector
    limit: InputMaybe<Scalars['Int']>
    skip: InputMaybe<Scalars['Int']>
  }

  type SitePluginGroupConnection_maxArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginGroupConnection_minArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginGroupConnection_sumArgs = {
    field: SitePluginFieldSelector
  }

  type SitePluginSortInput = {
    readonly browserAPIs: InputMaybe<SortOrderEnum>
    readonly children: InputMaybe<NodeSortInput>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly name: InputMaybe<SortOrderEnum>
    readonly nodeAPIs: InputMaybe<SortOrderEnum>
    readonly packageJson: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly pluginFilepath: InputMaybe<SortOrderEnum>
    readonly pluginOptions: InputMaybe<SortOrderEnum>
    readonly resolve: InputMaybe<SortOrderEnum>
    readonly ssrAPIs: InputMaybe<SortOrderEnum>
    readonly version: InputMaybe<SortOrderEnum>
  }

  type SiteSiteMetadata = {
    readonly description: Maybe<Scalars['String']>
    readonly siteUrl: Maybe<Scalars['String']>
    readonly tagline: Maybe<Scalars['String']>
    readonly title: Maybe<Scalars['String']>
  }

  type SiteSiteMetadataFieldSelector = {
    readonly description: InputMaybe<FieldSelectorEnum>
    readonly siteUrl: InputMaybe<FieldSelectorEnum>
    readonly tagline: InputMaybe<FieldSelectorEnum>
    readonly title: InputMaybe<FieldSelectorEnum>
  }

  type SiteSiteMetadataFilterInput = {
    readonly description: InputMaybe<StringQueryOperatorInput>
    readonly siteUrl: InputMaybe<StringQueryOperatorInput>
    readonly tagline: InputMaybe<StringQueryOperatorInput>
    readonly title: InputMaybe<StringQueryOperatorInput>
  }

  type SiteSiteMetadataSortInput = {
    readonly description: InputMaybe<SortOrderEnum>
    readonly siteUrl: InputMaybe<SortOrderEnum>
    readonly tagline: InputMaybe<SortOrderEnum>
    readonly title: InputMaybe<SortOrderEnum>
  }

  type SiteSortInput = {
    readonly buildTime: InputMaybe<SortOrderEnum>
    readonly children: InputMaybe<NodeSortInput>
    readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>
    readonly host: InputMaybe<SortOrderEnum>
    readonly id: InputMaybe<SortOrderEnum>
    readonly internal: InputMaybe<InternalSortInput>
    readonly jsxRuntime: InputMaybe<SortOrderEnum>
    readonly parent: InputMaybe<NodeSortInput>
    readonly pathPrefix: InputMaybe<SortOrderEnum>
    readonly polyfill: InputMaybe<SortOrderEnum>
    readonly port: InputMaybe<SortOrderEnum>
    readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>
    readonly trailingSlash: InputMaybe<SortOrderEnum>
  }

  type SortOrderEnum = 'ASC' | 'DESC'

  type StringQueryOperatorInput = {
    readonly eq: InputMaybe<Scalars['String']>
    readonly glob: InputMaybe<Scalars['String']>
    readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>
    readonly ne: InputMaybe<Scalars['String']>
    readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>
    readonly regex: InputMaybe<Scalars['String']>
  }

  type TransformOptions = {
    readonly cropFocus: InputMaybe<ImageCropFocus>
    readonly duotone: InputMaybe<DuotoneGradient>
    readonly fit: InputMaybe<ImageFit>
    readonly grayscale: InputMaybe<Scalars['Boolean']>
    readonly rotate: InputMaybe<Scalars['Int']>
    readonly trim: InputMaybe<Scalars['Float']>
  }

  type WebPOptions = {
    readonly quality: InputMaybe<Scalars['Int']>
  }

  type AccountFavoritesPageQueryVariables = Exact<{ [key: string]: never }>

  type AccountFavoritesPageQuery = {
    readonly talks: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly favorite: boolean | null
          readonly publishedDate: string | null
          readonly scripture: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
  }

  type AccountFinishedPageQueryVariables = Exact<{ [key: string]: never }>

  type AccountFinishedPageQuery = {
    readonly talks: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly favorite: boolean | null
          readonly publishedDate: string | null
          readonly scripture: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
  }

  type AffiliateLinksQueryVariables = Exact<{ [key: string]: never }>

  type AffiliateLinksQuery = {
    readonly links: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly data: {
          readonly title: string | null
          readonly subtitle: string | null
          readonly affiliate: string | null
          readonly type: string | null
          readonly productId: number | null
          readonly link: {
            readonly childMarkdownRemark: { readonly rawMarkdownBody: string | null } | null
          } | null
          readonly description: {
            readonly childMarkdownRemark: {
              readonly excerpt: string | null
              readonly html: string | null
            } | null
          } | null
          readonly image: {
            readonly localFiles: ReadonlyArray<{
              readonly childImageSharp: {
                readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
              } | null
            } | null> | null
          } | null
        } | null
      }>
    }
  }

  type ClipsPageQueryVariables = Exact<{ [key: string]: never }>

  type ClipsPageQuery = {
    readonly clips: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly publishedDate: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
  }

  type FeaturedSpeakersPageQueryVariables = Exact<{ [key: string]: never }>

  type FeaturedSpeakersPageQuery = {
    readonly speakers: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly firstName: string | null
          readonly lastName: string | null
          readonly role: string | null
          readonly website: string | null
          readonly avatar: {
            readonly localFiles: ReadonlyArray<{
              readonly childImageSharp: {
                readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
              } | null
            } | null> | null
          } | null
          readonly talks: ReadonlyArray<{ readonly id: string } | null> | null
        } | null
      }>
    }
  }

  type FeaturedTalksPageQueryVariables = Exact<{ [key: string]: never }>

  type FeaturedTalksPageQuery = {
    readonly talks: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly data: {
          readonly title: string | null
          readonly publishedDate: string | null
          readonly favorite: boolean | null
          readonly scripture: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
        readonly fields: { readonly slug: string | null } | null
      }>
    }
    readonly topics: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly publishedTalksCount: number | null
          readonly talks: ReadonlyArray<{ readonly id: string } | null> | null
        } | null
      }>
    }
  }

  type GatsbyImageSharpFixedFragment = {
    readonly base64: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_noBase64Fragment = {
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
  }

  type GatsbyImageSharpFixed_withWebpFragment = {
    readonly base64: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFixed_withWebp_noBase64Fragment = {
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly width: number
    readonly height: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
  }

  type GatsbyImageSharpFluidFragment = {
    readonly base64: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_noBase64Fragment = {
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebpFragment = {
    readonly base64: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebp_noBase64Fragment = {
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = {
    readonly tracedSVG: string | null
    readonly aspectRatio: number
    readonly src: string
    readonly srcSet: string
    readonly srcWebp: string | null
    readonly srcSetWebp: string | null
    readonly sizes: string
  }

  type GatsbyImageSharpFluidLimitPresentationSizeFragment = {
    readonly maxHeight: number
    readonly maxWidth: number
  }

  type IndexPageQueryVariables = Exact<{ [key: string]: never }>

  type IndexPageQuery = {
    readonly talks: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly publishedDate: string | null
          readonly scripture: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
    readonly speakers: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly ministry: string | null
          readonly website: string | null
          readonly avatar: {
            readonly localFiles: ReadonlyArray<{
              readonly childImageSharp: {
                readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
              } | null
            } | null> | null
          } | null
        } | null
      }>
    }
    readonly introImage: {
      readonly childImageSharp: {
        readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
      } | null
    } | null
  }

  type SeriesPageQueryVariables = Exact<{ [key: string]: never }>

  type SeriesPageQuery = {
    readonly series: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly publishedTalksCount: number | null
          readonly speakers: ReadonlyArray<{
            readonly id: string
            readonly fields: { readonly slug: string | null } | null
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
  }

  type SingleClipPageQueryVariables = Exact<{
    id: Scalars['String']
  }>

  type SingleClipPageQuery = {
    readonly clip: {
      readonly id: string
      readonly data: {
        readonly title: string | null
        readonly link: {
          readonly childMarkdownRemark: {
            readonly html: string | null
            readonly htmlAst: Record<string, unknown> | null
          } | null
        } | null
        readonly speakers: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: { readonly title: string | null } | null
        } | null> | null
        readonly talks: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly favorite: boolean | null
            readonly publishedDate: string | null
            readonly speakers: ReadonlyArray<{
              readonly data: { readonly title: string | null } | null
            } | null> | null
          } | null
        } | null> | null
      } | null
    } | null
  }

  type SinglePageQueryVariables = Exact<{
    id: Scalars['String']
  }>

  type SinglePageQuery = {
    readonly page: {
      readonly id: string
      readonly fields: { readonly slug: string | null } | null
      readonly data: {
        readonly title: string | null
        readonly content: {
          readonly childMarkdownRemark: {
            readonly excerpt: string | null
            readonly html: string | null
          } | null
        } | null
      } | null
    } | null
  }

  type SingleSeriesPageQueryVariables = Exact<{
    id: Scalars['String']
  }>

  type SingleSeriesPageQuery = {
    readonly series: {
      readonly id: string
      readonly fields: { readonly slug: string | null } | null
      readonly data: {
        readonly title: string | null
        readonly talks: ReadonlyArray<{
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly favorite: boolean | null
            readonly scripture: string | null
            readonly speakers: ReadonlyArray<{
              readonly data: {
                readonly title: string | null
                readonly avatar: {
                  readonly localFiles: ReadonlyArray<{
                    readonly childImageSharp: {
                      readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                    } | null
                  } | null> | null
                } | null
              } | null
            } | null> | null
          } | null
        } | null> | null
      } | null
    } | null
  }

  type SingleSpeakerPageQueryVariables = Exact<{
    id: Scalars['String']
  }>

  type SingleSpeakerPageQuery = {
    readonly speaker: {
      readonly data: {
        readonly title: string | null
        readonly role: string | null
        readonly ministry: string | null
        readonly website: string | null
        readonly description: {
          readonly childMarkdownRemark: {
            readonly excerpt: string | null
            readonly html: string | null
          } | null
        } | null
        readonly banner: {
          readonly localFiles: ReadonlyArray<{
            readonly childImageSharp: {
              readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
            } | null
          } | null> | null
        } | null
        readonly avatar: {
          readonly localFiles: ReadonlyArray<{
            readonly childImageSharp: {
              readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
            } | null
          } | null> | null
        } | null
        readonly clips: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly speakers: ReadonlyArray<{
              readonly id: string
              readonly fields: { readonly slug: string | null } | null
              readonly data: { readonly title: string | null } | null
            } | null> | null
          } | null
        } | null> | null
        readonly talks: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly favorite: boolean | null
            readonly scripture: string | null
            readonly speakers: ReadonlyArray<{
              readonly data: { readonly title: string | null } | null
            } | null> | null
          } | null
        } | null> | null
      } | null
    } | null
    readonly speakers: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly firstName: string | null
          readonly lastName: string | null
        } | null
      }>
    }
  }

  type SiteMetadataQueryVariables = Exact<{ [key: string]: never }>

  type SiteMetadataQuery = {
    readonly site: {
      readonly siteMetadata: {
        readonly title: string | null
        readonly description: string | null
      } | null
    } | null
  }

  type SpeakersPageQueryVariables = Exact<{ [key: string]: never }>

  type SpeakersPageQuery = {
    readonly speakers: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly favorite: boolean | null
          readonly firstName: string | null
          readonly lastName: string | null
          readonly role: string | null
          readonly website: string | null
          readonly avatar: {
            readonly localFiles: ReadonlyArray<{
              readonly childImageSharp: {
                readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
              } | null
            } | null> | null
          } | null
          readonly talks: ReadonlyArray<{ readonly id: string } | null> | null
        } | null
      }>
    }
  }

  type TalkPageQueryVariables = Exact<{
    id: Scalars['String']
  }>

  type TalkPageQuery = {
    readonly talk: {
      readonly id: string
      readonly data: {
        readonly title: string | null
        readonly favorite: boolean | null
        readonly scripture: string | null
        readonly link: {
          readonly childMarkdownRemark: {
            readonly html: string | null
            readonly htmlAst: Record<string, unknown> | null
          } | null
        } | null
        readonly series: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly publishedTalksCount: number | null
            readonly speakers: ReadonlyArray<{
              readonly id: string
              readonly fields: { readonly slug: string | null } | null
              readonly data: {
                readonly title: string | null
                readonly avatar: {
                  readonly localFiles: ReadonlyArray<{
                    readonly childImageSharp: {
                      readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                    } | null
                  } | null> | null
                } | null
              } | null
            } | null> | null
          } | null
        } | null> | null
        readonly speakers: ReadonlyArray<{
          readonly id: string
          readonly fields: { readonly slug: string | null } | null
          readonly data: {
            readonly title: string | null
            readonly talks: ReadonlyArray<{
              readonly id: string
              readonly fields: { readonly slug: string | null } | null
              readonly data: {
                readonly title: string | null
                readonly favorite: boolean | null
                readonly publishedDate: string | null
                readonly speakers: ReadonlyArray<{
                  readonly data: { readonly title: string | null } | null
                } | null> | null
              } | null
            } | null> | null
          } | null
        } | null> | null
        readonly topics: ReadonlyArray<{
          readonly data: { readonly title: string | null } | null
          readonly fields: { readonly slug: string | null } | null
        } | null> | null
      } | null
    } | null
  }

  type TalksPageQueryVariables = Exact<{
    pageSize?: InputMaybe<Scalars['Int']>
    skip?: InputMaybe<Scalars['Int']>
    topic: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>>
  }>

  type TalksPageQuery = {
    readonly talks: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly favorite: boolean | null
          readonly publishedDate: string | null
          readonly scripture: string | null
          readonly speakers: ReadonlyArray<{
            readonly data: {
              readonly title: string | null
              readonly avatar: {
                readonly localFiles: ReadonlyArray<{
                  readonly childImageSharp: {
                    readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData
                  } | null
                } | null> | null
              } | null
            } | null
          } | null> | null
        } | null
      }>
    }
    readonly topics: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: {
          readonly title: string | null
          readonly publishedTalksCount: number | null
          readonly talks: ReadonlyArray<{ readonly id: string } | null> | null
        } | null
      }>
    }
  }

  type ClipsQueryVariables = Exact<{ [key: string]: never }>

  type ClipsQuery = {
    readonly clips: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
      }>
    }
  }

  type PagesQueryVariables = Exact<{ [key: string]: never }>

  type PagesQuery = {
    readonly pages: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
      }>
    }
  }

  type SeriesQueryVariables = Exact<{ [key: string]: never }>

  type SeriesQuery = {
    readonly series: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
      }>
    }
  }

  type SpeakersQueryVariables = Exact<{ [key: string]: never }>

  type SpeakersQuery = {
    readonly speakers: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
      }>
    }
  }

  type TalksQueryVariables = Exact<{ [key: string]: never }>

  type TalksQuery = {
    readonly talks: {
      readonly totalCount: number
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
      }>
    }
  }

  type TopicsQueryVariables = Exact<{ [key: string]: never }>

  type TopicsQuery = {
    readonly topics: {
      readonly nodes: ReadonlyArray<{
        readonly id: string
        readonly fields: { readonly slug: string | null } | null
        readonly data: { readonly title: string | null } | null
      }>
    }
  }
}
